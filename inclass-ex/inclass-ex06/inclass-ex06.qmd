---
title: "In-Class Exercise 6"
date: "13 February 2023"
format: html
date-modified: "`r Sys.Date()`"
number-sections: true

execute:
  message: true
  warning: false
  echo: true
  eval: true
  
editor: visual
---

In-class use SFDEP which is newer. Hands-on is using SPDEP

```{r}
pacman::p_load(sf, tmap, sfdep, tidyverse)
```

Load the geospatial data

Distance base is not good for this type of data, but contiguity is good.

```{r}
hunan <- st_read(dsn="data/geospatial", layer="Hunan")
```

```{r}
hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv")
```

Combine the aspatial and geospatial.

The joins are case-sensitive. So if it's mixed, need to process the casing first

```{r}
hunan_GDPPC <- left_join(hunan, hunan2012) %>%
  select(1:4,7,15)
```

```{r}
tmap_mode("plot") +
  tm_shape(hunan_GDPPC) + 
  tm_fill("GDPPC",
          style="quantile",
          palette="Blues",
          title="GDPPC")+
  tm_layout(main.title = "Distribution of GDP per capita by district, Hunan Province",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45,
            legend.width = 0.35,
            frame=TRUE) +
  tm_borders(alpha=0.5)+
  tm_compass(type="8star", size=2)+
  tm_scale_bar()+
  tm_grid(alpha=0.2)
  
```

Contiguity Neighbour

Put back into the tibbler dataframe

.before put the newly created data field at the first column (name of column is nb)

The nb column will be a list of neighbours

```{r}
cn_queen <- hunan_GDPPC %>%
  mutate(nb=st_contiguity(geometry),
         .before = 1)
```

Another neighbour method nb using the rook

Here I only know the neighbour, so i need to convert to space matrix

```{r}
cn_rook <- hunan_GDPPC %>%
  mutate(nb=st_contiguity(geometry, queen=FALSE),
         .before = 1)
```

### Contiguity weights

Do both of them together by calculating the weights

```{r}
wm_q <- hunan_GDPPC %>%
  mutate(nb = st_contiguity(geometry),
         wt = st_weights(nb),
         .before=1)
```

Rook method

```{r}
wm_r <- hunan_GDPPC %>%
  mutate(nb = st_contiguity(geometry),
         queen=FALSE,
         wt = st_weights(nb),
         .before=1)
```
