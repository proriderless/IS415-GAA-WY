[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "handson-ex/lesson3/hands-on-ex3.html",
    "href": "handson-ex/lesson3/hands-on-ex3.html",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "pacman::p_load(sf, tmap, tidyverse)\n\n\nmpsz <- st_read(dsn = \"data/geospatial\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `D:\\Documents\\IS415-GAA-WY\\handson-ex\\lesson3\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\nmpsz\n\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...\n\n\n\npopdata <- read_csv(\"data/aspatial/respopagesextod2011to2020.csv\")\n\n\npopdata2020 <- popdata %>%\n  filter(Time == 2020) %>%\n  group_by(PA, SZ, AG) %>%\n  summarise(`POP` = sum(`Pop`)) %>%\n  ungroup()%>%\n  pivot_wider(names_from=AG, \n              values_from=POP) %>%\n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[12])) %>%\nmutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+\nrowSums(.[13:15]))%>%\nmutate(`AGED`=rowSums(.[16:21])) %>%\nmutate(`TOTAL`=rowSums(.[3:21])) %>%  \nmutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n/`ECONOMY ACTIVE`) %>%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)\n\n\npopdata2020 <- popdata2020 %>%\n  mutate_at(.vars = vars(PA, SZ), \n          .funs = funs(toupper)) %>%\n  filter(`ECONOMY ACTIVE` > 0)\n\n\nmpsz_pop2020 <- left_join(mpsz, popdata2020,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\n\n\nwrite_rds(mpsz_pop2020, \"data/rds/mpszpop2020.rds\")"
  },
  {
    "objectID": "handson-ex/lesson3/hands-on-ex3.html#plotting-a-choropleth-map",
    "href": "handson-ex/lesson3/hands-on-ex3.html#plotting-a-choropleth-map",
    "title": "Hands-on Exercise 2",
    "section": "Plotting a Choropleth Map",
    "text": "Plotting a Choropleth Map\n\ntmap_mode(\"plot\")\nqtm(mpsz_pop2020, \n    fill = \"DEPENDENCY\")\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\nDrawing a choropleth map using tm_polygons()\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\")\n\n\n\n\n\n\nTM Fill only\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\")\n\n\n\n\n\n\nAdding Boundary\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\") +\n  tm_borders(lwd = 0.1,  alpha = 1)\n\n\n\n\n\n\nPlotting with Built in Classification Methods\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nEqual classification:\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nReverse Color Shading\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\nMap Legend\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"jenks\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\nMap Style\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")\n\n\n\n\n\n\nCartographic Furniture\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"No. of persons\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\nReset Style\n\ntmap_style(\"white\")\n\n\n\nAssigning values to Aesthetic Args\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = \"equal\", \n          palette = \"Blues\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n\n\n\n\nGreen\n\ntm_shape(mpsz_pop2020)+ \n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"),\n          style = c(\"equal\", \"quantile\"), \n          palette = list(\"Blues\",\"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"))\n\n\n\n\n\n\nGroup by variable using tm_facets()\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE, \n            drop.shapes=TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\nStandalone Maps\n\nyoungmap <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\nagedmap <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)\n\n\n\n\n\n\nMapping Spatial Objects meeting a Selection Criterion\n\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ])+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45, \n            legend.width = 5.0,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "handson-ex/lesson4/handson-ex4.html",
    "href": "handson-ex/lesson4/handson-ex4.html",
    "title": "Hands-on Exercise 4",
    "section": "",
    "text": "Notes:\nPoint as events have to be full census, rather than only a sampling\n1st order - check patterns - random/not random;\n2nd order - how point events change with interactions with environment/data points\nLoading packages\nLoad Spatial Data"
  },
  {
    "objectID": "handson-ex/lesson4/handson-ex4.html#nearest-neighbour-analysis",
    "href": "handson-ex/lesson4/handson-ex4.html#nearest-neighbour-analysis",
    "title": "Hands-on Exercise 4",
    "section": "1 Nearest Neighbour Analysis",
    "text": "1 Nearest Neighbour Analysis\nTesting spatial point patterns using Clark and Evans\nAcross the board in sg: Good spread. P-value => 0.05, randomly distributed\n\nclarkevans.test(childcareSG_ppp,\n                correction=\"none\",\n                clipregion=\"sg_owin\",\n                alternative=c(\"clustered\"),\n                nsim=99)\n\n\n    Clark-Evans test\n    No edge correction\n    Monte Carlo test based on 99 simulations of CSR with fixed n\n\ndata:  childcareSG_ppp\nR = 0.54756, p-value = 0.01\nalternative hypothesis: clustered (R < 1)\n\n\n\n1.1 Clark and Evans Test: Choa chu kang planning area\nResult: VERY clustered, but randomly distributed\n\nclarkevans.test(childcare_ck_ppp,\n                correction=\"none\",\n                clipregion=NULL,\n                alternative=c(\"two.sided\"),\n                nsim=999)\n\n\n    Clark-Evans test\n    No edge correction\n    Monte Carlo test based on 999 simulations of CSR with fixed n\n\ndata:  childcare_ck_ppp\nR = 0.91118, p-value = 0.056\nalternative hypothesis: two-sided\n\n\n\n\n1.2 Clark and Evans Test: Tampines planning area\nSomewhat clustered, not randomly distributed\n\nclarkevans.test(childcare_tm_ppp,\n                correction=\"none\",\n                clipregion=NULL,\n                alternative=c(\"two.sided\"),\n                nsim=999)\n\n\n    Clark-Evans test\n    No edge correction\n    Monte Carlo test based on 999 simulations of CSR with fixed n\n\ndata:  childcare_tm_ppp\nR = 0.80478, p-value = 0.002\nalternative hypothesis: two-sided"
  },
  {
    "objectID": "handson-ex/lesson7/handson-ex07.html",
    "href": "handson-ex/lesson7/handson-ex07.html",
    "title": "Hands-On Exercise 7",
    "section": "",
    "text": "Chapter 9: Global Measurement of Spatial Autocorrelation\nLoading the packages\nRelational Join\nVisualizing Regional Development Indicator"
  },
  {
    "objectID": "handson-ex/lesson7/handson-ex07.html#computing-gi-statistics",
    "href": "handson-ex/lesson7/handson-ex07.html#computing-gi-statistics",
    "title": "Hands-On Exercise 7",
    "section": "Computing GI Statistics",
    "text": "Computing GI Statistics\n\nGi statistics using fixed distance\n\nfips <- order(hunan$County)\ngi.fixed <- localG(hunan$GDPPC, wm62_lw)\ngi.fixed\n\n [1]  0.436075843 -0.265505650 -0.073033665  0.413017033  0.273070579\n [6] -0.377510776  2.863898821  2.794350420  5.216125401  0.228236603\n[11]  0.951035346 -0.536334231  0.176761556  1.195564020 -0.033020610\n[16]  1.378081093 -0.585756761 -0.419680565  0.258805141  0.012056111\n[21] -0.145716531 -0.027158687 -0.318615290 -0.748946051 -0.961700582\n[26] -0.796851342 -1.033949773 -0.460979158 -0.885240161 -0.266671512\n[31] -0.886168613 -0.855476971 -0.922143185 -1.162328599  0.735582222\n[36] -0.003358489 -0.967459309 -1.259299080 -1.452256513 -1.540671121\n[41] -1.395011407 -1.681505286 -1.314110709 -0.767944457 -0.192889342\n[46]  2.720804542  1.809191360 -1.218469473 -0.511984469 -0.834546363\n[51] -0.908179070 -1.541081516 -1.192199867 -1.075080164 -1.631075961\n[56] -0.743472246  0.418842387  0.832943753 -0.710289083 -0.449718820\n[61] -0.493238743 -1.083386776  0.042979051  0.008596093  0.136337469\n[66]  2.203411744  2.690329952  4.453703219 -0.340842743 -0.129318589\n[71]  0.737806634 -1.246912658  0.666667559  1.088613505 -0.985792573\n[76]  1.233609606 -0.487196415  1.626174042 -1.060416797  0.425361422\n[81] -0.837897118 -0.314565243  0.371456331  4.424392623 -0.109566928\n[86]  1.364597995 -1.029658605 -0.718000620\nattr(,\"cluster\")\n [1] Low  Low  High High High High High High High Low  Low  High Low  Low  Low \n[16] High High High High Low  High High Low  Low  High Low  Low  Low  Low  Low \n[31] Low  Low  Low  High Low  Low  Low  Low  Low  Low  High Low  Low  Low  Low \n[46] High High Low  Low  Low  Low  High Low  Low  Low  Low  Low  High Low  Low \n[61] Low  Low  Low  High High High Low  High Low  Low  High Low  High High Low \n[76] High Low  Low  Low  Low  Low  Low  High High Low  High Low  Low \nLevels: Low High\nattr(,\"gstari\")\n[1] FALSE\nattr(,\"call\")\nlocalG(x = hunan$GDPPC, listw = wm62_lw)\nattr(,\"class\")\n[1] \"localG\"\n\n\n\nhunan.gi <- cbind(hunan, as.matrix(gi.fixed)) %>%\n  rename(gstat_fixed = as.matrix.gi.fixed.)\n\nGi Values with fixed distance weights\n\ngdppc <- qtm(hunan, \"GDPPC\")\n\nGimap <-tm_shape(hunan.gi) +\n  tm_fill(col = \"gstat_fixed\", \n          style = \"pretty\",\n          palette=\"-RdBu\",\n          title = \"local Gi\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, Gimap, asp=1, ncol=2)\n\n\n\n\nGi Statistics using adaptive distance\n\nfips <- order(hunan$County)\ngi.adaptive <- localG(hunan$GDPPC, knn_lw)\nhunan.gi <- cbind(hunan, as.matrix(gi.adaptive)) %>%\n  rename(gstat_adaptive = as.matrix.gi.adaptive.)\n\nMapping Gi Values with adaptive distance weights\n\ngdppc<- qtm(hunan, \"GDPPC\")\n\nGimap <- tm_shape(hunan.gi) + \n  tm_fill(col = \"gstat_adaptive\", \n          style = \"pretty\", \n          palette=\"-RdBu\", \n          title = \"local Gi\") + \n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, \n             Gimap, \n             asp=1, \n             ncol=2)"
  },
  {
    "objectID": "inclass-ex/inclass-ex04/inclass_ex04.html",
    "href": "inclass-ex/inclass-ex04/inclass_ex04.html",
    "title": "In-class Exercise 4",
    "section": "",
    "text": "0.1 Loading the package\n\npacman::p_load(maptools, sf, raster, spatstat, tmap)\n\nThings to learn from the code chunk\n\n\n0.2 Importing Data\n\nchildcare_sf <- st_read(\"data/childcare.geojson\") %>%\n  st_transform(crs = 3414)\n\nReading layer `childcare' from data source \n  `D:\\Documents\\IS415-GAA-WY\\inclass-ex\\inclass-ex04\\data\\childcare.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 1545 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.248403 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\n\nsg_sf <- st_read(dsn = \"data\", layer=\"CostalOutline\")\n\nReading layer `CostalOutline' from data source \n  `D:\\Documents\\IS415-GAA-WY\\inclass-ex\\inclass-ex04\\data' using driver `ESRI Shapefile'\nSimple feature collection with 60 features and 4 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 2663.926 ymin: 16357.98 xmax: 56047.79 ymax: 50244.03\nProjected CRS: SVY21\n\n\n\nmpsz_sf <- st_read(dsn = \"data\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `D:\\Documents\\IS415-GAA-WY\\inclass-ex\\inclass-ex04\\data' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nNotes:\n\n\n\n\n\n\nTip\n\n\n\nUse tmap_mode(‘plot’) for staticmap\nChange alpha of dots to change opacity for dots\nChange view as vector\nAlso, there is an order to the way you display the tmap:\ntmap_mode -> tmap_plot, shape, dots, view\ntm_bubbles -> For proportion\n\n\n\ntmap_mode('view') + \n  tm_shape(childcare_sf)+\n  tm_dots(alpha = 0.5)+\n  tm_view(set.zoom.limits = c(11,14))\n\n\n\n\n\n\n\n0.2.1 Convert from Shape File to Spatial Feature File\n\nchildcare <- as_Spatial(childcare_sf)\nmpsz <- as_Spatial(mpsz_sf)\nsg <- as_Spatial(sg_sf)\n\n\n\n0.2.2 Convert from Spatial Feature to Generic\n\nchildcare_sp <- as(childcare, \"SpatialPoints\")\nsg_sp <- as(sg, \"SpatialPolygons\")\n\n\n\n0.2.3 Convert to PPP format (Spatstat)\nCos for points they need x y coordinates\n\nchildcare_ppp <- as(childcare_sp, \"ppp\")\nchildcare_ppp\n\nPlanar point pattern: 1545 points\nwindow: rectangle = [11203.01, 45404.24] x [25667.6, 49300.88] units\n\n\nJitter to handle duplicate data\n\nchildcare_ppp_jit <- rjitter(childcare_ppp, \n                             retry=TRUE, \n                             nsim=1, \n                             drop=TRUE)\n\n\nany(duplicated(childcare_ppp_jit))\n\n[1] FALSE\n\n\n\nplot(childcare_ppp_jit)\n\n\n\n\n\nsg_owin <- as(sg_sp, \"owin\")\nplot(sg_owin)\n\n\n\n\n\nchildcareSG_ppp = childcare_ppp[sg_owin]\nplot(childcareSG_ppp)\n\n\n\n\nLonger the bandwidth, the smoother it is.\nIf data points are well-distributed/well-defined, then fixed is better, adaptive otherwise\nIn the childcare sense, fixed is better because we know they typically cluster around residential areas\nUse L function since that has a clearer interpretation (can maybe display all)\nThe number of monte carlo simulation we run will depend on our confidence level. (so if run 95 times, our confidence is 95% and 99 is 99%)\nFor L estimate:\nThe correction parameter is for H correction, but some might take longer to account for the edge. However, this alone cannot derive if the clustering is statistically significant\nWe run envelop which encompasses all the lines from the simulation\nFrom exercise 5 (2nd order)\nAnything within the envelop is statistically insignificant. Within the distance of 480-560 (outside the envelop), we see that is statistically significant and cluster. Below the 0 is no clustering.\nAll the lines are simulations of a 100 sample. (if we run 99 times).\nThe black line can be considered alpha-value that is compared to the p-value.\nHow to inteprete:\n\nAt 480m distance between the childcare center, we can start to see signs of clustering."
  },
  {
    "objectID": "inclass-ex/inclass-ex05/data/stores.html",
    "href": "inclass-ex/inclass-ex05/data/stores.html",
    "title": "IS415-GAA-WY",
    "section": "",
    "text": "<!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’>     \n\n\n        0 0     false"
  },
  {
    "objectID": "inclass-ex/inclass-ex05/data/study_area.html",
    "href": "inclass-ex/inclass-ex05/data/study_area.html",
    "title": "IS415-GAA-WY",
    "section": "",
    "text": "<!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’>     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "inclass-ex/inclass-ex05/inclass_ex05.html",
    "href": "inclass-ex/inclass-ex05/inclass_ex05.html",
    "title": "In-class Exercise 5",
    "section": "",
    "text": "Packages\n\npacman::p_load(tidyverse, tmap, sf, sfdep)\n\nStudy Area\n\nstudyArea <- st_read(dsn=\"data\", layer=\"study_area\") %>% st_transform(crs=3829)\n\nReading layer `study_area' from data source \n  `D:\\Documents\\IS415-GAA-WY\\inclass-ex\\inclass-ex05\\data' using driver `ESRI Shapefile'\nSimple feature collection with 7 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 121.4836 ymin: 25.00776 xmax: 121.592 ymax: 25.09288\nGeodetic CRS:  TWD97\n\n\n\nstores <- st_read(dsn=\"data\", layer=\"stores\") %>% st_transform(crs=3829)\n\nReading layer `stores' from data source \n  `D:\\Documents\\IS415-GAA-WY\\inclass-ex\\inclass-ex05\\data' using driver `ESRI Shapefile'\nSimple feature collection with 1409 features and 4 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 121.4902 ymin: 25.01257 xmax: 121.5874 ymax: 25.08557\nGeodetic CRS:  TWD97\n\n\n\n#plot the polygon first\ntmap_mode('view') +\n  tm_shape(studyArea) +\n  tm_polygons() +\n  tm_shape(stores) +\n  tm_dots(col=\"Name\",\n          size=0.01,\n          border.col=\"black\",\n          border.lwd=0.5) + \n  tm_view(set.zoom.limits = c(12,16))\n\n\n\n\n\n\nLocal colocation quotient\n\n\n\n\n\n\nTip\n\n\n\n#k-nearest neigbour (adaptive)\n#choose 6 is not good, cos there is a chance of equal proportion\n#but with include self, it will become odd (6+1), no chance equal proportion\nnb -> list of length is the distance between one point against every other point\n\n\n\nnb <- include_self(\n  st_knn(st_geometry(stores), 6))\n\n\nwt <- st_kernel_weights(nb,\n                        stores,\n                        \"gaussian\",\n                        adaptive=TRUE)\n\n\nFamilyMart <- stores %>%\n  filter(Name == \"Family Mart\")\nA <- FamilyMart$Name\n\n\nSevenEleven <- stores %>%\n  filter(Name == \"7-Eleven\")\nB <- SevenEleven$Name\n\n\n#A is my target\n#B is my neighbour to see if we colocate\n#Run 50 simulations, will convert to p-value\n#NA is common\n#There are different p-value some over some below 0.05\nLCLQ <- local_colocation(A, B, nb,wt, 49)\n\n\n#No unique identifier, so cannot left/right join\n#So no sorting, as the sequence is preserved already\n#Stores must be the first to keep the geometry column\nLCLQ_stores <- cbind(stores, LCLQ)\n\nPlot the map\n\ntmap_mode(\"view\")+\n  tm_shape(studyArea) +\n  tm_polygons() +\n  tm_shape(LCLQ_stores) +\n  tm_dots(col=\"X7.Eleven\",\n          size=0.01,\n          border.col=\"black\",\n          border.lwd=0.5) + \n  tm_view(set.zoom.limits = c(12,16))\n\n\n\n\n\n#The map below means dot is the target is family mart that is colocated with 7-eleven"
  },
  {
    "objectID": "inclass-ex/inclass-ex06/inclass-ex06.html",
    "href": "inclass-ex/inclass-ex06/inclass-ex06.html",
    "title": "In-Class Exercise 6",
    "section": "",
    "text": "In-class use SFDEP which is newer. Hands-on is using SPDEP\n\npacman::p_load(sf, tmap, sfdep, tidyverse)\n\nLoad the geospatial data\nDistance base is not good for this type of data, but contiguity is good.\n\nhunan <- st_read(dsn=\"data/geospatial\", layer=\"Hunan\")\n\nReading layer `Hunan' from data source \n  `D:\\Documents\\IS415-GAA-WY\\inclass-ex\\inclass-ex06\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\nhunan2012 <- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\nCombine the aspatial and geospatial.\nThe joins are case-sensitive. So if it’s mixed, need to process the casing first\n\nhunan_GDPPC <- left_join(hunan, hunan2012) %>%\n  select(1:4,7,15)\n\n\ntmap_mode(\"plot\") +\n  tm_shape(hunan_GDPPC) + \n  tm_fill(\"GDPPC\",\n          style=\"quantile\",\n          palette=\"Blues\",\n          title=\"GDPPC\")+\n  tm_layout(main.title = \"Distribution of GDP per capita by district, Hunan Province\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45,\n            legend.width = 0.35,\n            frame=TRUE) +\n  tm_borders(alpha=0.5)+\n  tm_compass(type=\"8star\", size=2)+\n  tm_scale_bar()+\n  tm_grid(alpha=0.2)\n\n\n\n\nContiguity Neighbour\nPut back into the tibbler dataframe\n.before put the newly created data field at the first column (name of column is nb)\nThe nb column will be a list of neighbours\n\ncn_queen <- hunan_GDPPC %>%\n  mutate(nb=st_contiguity(geometry),\n         .before = 1)\n\nAnother neighbour method nb using the rook\nHere I only know the neighbour, so i need to convert to space matrix\n\ncn_rook <- hunan_GDPPC %>%\n  mutate(nb=st_contiguity(geometry, queen=FALSE),\n         .before = 1)\n\n\n0.1 Contiguity weights\nDo both of them together by calculating the weights\n\nwm_q <- hunan_GDPPC %>%\n  mutate(nb = st_contiguity(geometry),\n         wt = st_weights(nb),\n         .before=1)\n\nRook method\n\nwm_r <- hunan_GDPPC %>%\n  mutate(nb = st_contiguity(geometry),\n         queen=FALSE,\n         wt = st_weights(nb),\n         .before=1)"
  },
  {
    "objectID": "inclass-ex/inclass-ex07/inclass-ex07.html",
    "href": "inclass-ex/inclass-ex07/inclass-ex07.html",
    "title": "In-class Exercise 7",
    "section": "",
    "text": "Load Data\n\npacman::p_load(sf, tmap, sfdep, tidyverse)\n\n\nhunan <- st_read(dsn=\"data/geospatial\", layer=\"Hunan\")\n\nReading layer `Hunan' from data source \n  `D:\\Documents\\IS415-GAA-WY\\inclass-ex\\inclass-ex07\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\nhunan2012 <- read_csv(\"data/aspatial/Hunan_2012.csv\")\n#hunanGDPPC <- read_csv(\"data/aspatial/Hunan_GDPPC.csv\")\n\n\nhunan_GDPPC <- left_join(hunan, hunan2012) %>%\n  select(1:4,7,15)\n\n\ntmap_mode(\"plot\") +\n  tm_shape(hunan_GDPPC) + \n  tm_fill(\"GDPPC\",\n          style=\"quantile\",\n          palette=\"Blues\",\n          title=\"GDPPC\")+\n  tm_layout(main.title = \"Distribution of GDP per capita by district, Hunan Province\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45,\n            legend.width = 0.35,\n            frame=TRUE) +\n  tm_borders(alpha=0.5)+\n  tm_compass(type=\"8star\", size=2)+\n  tm_scale_bar()+\n  tm_grid(alpha=0.2)\n\n\n\n\n\nwm_q <- hunan_GDPPC %>%\n  mutate(nb=st_contiguity(geometry),\n         wt = st_weights(nb, style=\"W\"),\n         .before = 1)\n\n\nGlobal moran\n(tend not to do this, we will straight away do the global moran test)\n\nmoranI <- global_moran(wm_q$GDPPC, wm_q$nb, wm_q$wt)\n\nBased on the result, (P-value < Alpha) we have enough evidence to reject null hypothesis that the GDP is spatial independent. Therefore show sign of clustering and spatially dependent\n\nglobal_moran_test(wm_q$GDPPC, wm_q$nb, wm_q$wt)\n\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n\n\n\nset.seed(1234) #Ensure reproducability\n\nPermutation Test\nIf dataset is small, can increase the number of simulation for stability\n\nglobal_moran_perm(wm_q$GDPPC, wm_q$nb, wm_q$wt, nsim=99)\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 100 \n\nstatistic = 0.30075, observed rank = 100, p-value < 2.2e-16\nalternative hypothesis: two.sided\n\n\n\nlisa <- wm_q %>% \n  mutate(local_moran = local_moran(GDPPC, nb, wt, nsim=99),\n         .before=1)%>%\n  unnest(local_moran) #explode the list\n\nIn general, mean and pysal are the same. (So use either mean/pysal)\nMedian is non-parametric version - used for non-normality assumption (if the curve is not normal, use median instead)\nPysal is using python algorithm\nSo just stay with Mean\n\nlisa\n\nSimple feature collection with 88 features and 20 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n# A tibble: 88 × 21\n         ii        eii   var_ii    z_ii    p_ii p_ii_…¹ p_fol…² skewn…³ kurtosis\n      <dbl>      <dbl>    <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>    <dbl>\n 1 -0.00147  0.00177    4.18e-4 -0.158  0.874      0.82    0.41  -0.812  0.652  \n 2  0.0259   0.00641    1.05e-2  0.190  0.849      0.96    0.48  -1.09   1.89   \n 3 -0.0120  -0.0374     1.02e-1  0.0796 0.937      0.76    0.38   0.824  0.0461 \n 4  0.00102 -0.0000349  4.37e-6  0.506  0.613      0.64    0.32   1.04   1.61   \n 5  0.0148  -0.00340    1.65e-3  0.449  0.654      0.5     0.25   1.64   3.96   \n 6 -0.0388  -0.00339    5.45e-3 -0.480  0.631      0.82    0.41   0.614 -0.264  \n 7  3.37    -0.198      1.41e+0  3.00   0.00266    0.08    0.04   1.46   2.74   \n 8  1.56    -0.265      8.04e-1  2.04   0.0417     0.08    0.04   0.459 -0.519  \n 9  4.42     0.0450     1.79e+0  3.27   0.00108    0.02    0.01   0.746 -0.00582\n10 -0.399   -0.0505     8.59e-2 -1.19   0.234      0.28    0.14  -0.685  0.134  \n# … with 78 more rows, 12 more variables: mean <fct>, median <fct>,\n#   pysal <fct>, nb <nb>, wt <list>, NAME_2 <chr>, ID_3 <int>, NAME_3 <chr>,\n#   ENGTYPE_3 <chr>, County <chr>, GDPPC <dbl>, geometry <POLYGON [°]>, and\n#   abbreviated variable names ¹​p_ii_sim, ²​p_folded_sim, ³​skewness\n\n\nPlotting\n\ntmap_mode(\"plot\")\ntm_shape(lisa) +\n  tm_fill(\"ii\")+\n  tm_borders(alpha=0.5)+\n  tm_view(set.zoom.limits=c(6,8))\n\n\n\n\nShould use p_ii_sim (tend to use), or p_folded_sim.\np_ii_sim is after you’ve ran the 100 simulations\n\ntmap_mode(\"plot\")\ntm_shape(lisa) +\n  tm_fill(\"p_ii_sim\")+\n  tm_borders(alpha=0.5)+\n  tm_view(set.zoom.limits=c(6,8))\n\n\n\n\n\n\nVisualize local moran I\nExlcude ALL THE INSIGNIFICANT ones\nNeed to have a class called insignificant. (in hands-on exercise). the current map don’t have.\nTake-home is not using LISA\n\nlisa_sig <- lisa %>%\n  filter(p_ii < 0.05)\n\ntmap_mode(\"plot\")\ntm_shape(lisa) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5)+\ntm_shape(lisa_sig) +\n  tm_fill(\"mean\") +\n  tm_borders(alpha=0.4)\n\n\n\n\n\n\nHot-cold spot analysis\n\nHCSA <- wm_q %>%\n  mutate(local_Gi = local_gstar_perm(\n    GDPPC, nb, wt, nsim=99),\n    .before=1) %>%\n  unnest(local_Gi)\n\nLocal G is you include itself!!!\n\nHCSA\n\nSimple feature collection with 88 features and 16 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n# A tibble: 88 × 17\n    gi_star   e_gi     var_gi  p_value p_sim p_fol…¹ skewn…² kurto…³ nb    wt   \n      <dbl>  <dbl>      <dbl>    <dbl> <dbl>   <dbl>   <dbl>   <dbl> <nb>  <lis>\n 1 -0.00567 0.0115 0.00000812  9.95e-1  0.82    0.41   1.03    1.23  <int> <dbl>\n 2 -0.235   0.0110 0.00000581  8.14e-1  1       0.5    0.912   1.05  <int> <dbl>\n 3  0.298   0.0114 0.00000776  7.65e-1  0.7     0.35   0.455  -0.732 <int> <dbl>\n 4  0.145   0.0121 0.0000111   8.84e-1  0.64    0.32   0.900   0.726 <int> <dbl>\n 5  0.356   0.0113 0.0000119   7.21e-1  0.64    0.32   1.08    1.31  <int> <dbl>\n 6 -0.480   0.0116 0.00000706  6.31e-1  0.82    0.41   0.364  -0.676 <int> <dbl>\n 7  3.66    0.0116 0.00000825  2.47e-4  0.02    0.01   0.909   0.664 <int> <dbl>\n 8  2.14    0.0116 0.00000714  3.26e-2  0.16    0.08   1.13    1.48  <int> <dbl>\n 9  4.55    0.0113 0.00000656  5.28e-6  0.02    0.01   1.36    4.14  <int> <dbl>\n10  1.61    0.0109 0.00000341  1.08e-1  0.18    0.09   0.269  -0.396 <int> <dbl>\n# … with 78 more rows, 7 more variables: NAME_2 <chr>, ID_3 <int>,\n#   NAME_3 <chr>, ENGTYPE_3 <chr>, County <chr>, GDPPC <dbl>,\n#   geometry <POLYGON [°]>, and abbreviated variable names ¹​p_folded_sim,\n#   ²​skewness, ³​kurtosis\n\n\n\ntmap_mode(\"view\")\ntm_shape(HCSA)+\n  tm_fill(\"gi_star\")+\n  tm_borders(alpha=0.5)+\n  tm_view(set.zoom.limits=c(6,8))\n\n\n\n\n\n\nThe stuff shown here is not useful, as we are only interested in <0.05 / <0.01 depending on significance level\n\ntmap_mode(\"plot\")\ntm_shape(HCSA)+\n  tm_fill(\"p_sim\")+\n  tm_borders(alpha=0.5)\n\n\n\n\n\n\nHow to perform emerging hotspot analysis\nfor take-home exercise\nConsolidate the files for take-home ex\n\npacman::p_load(sf, sfdep, tmap, plotly, tidyverse, zoo, Kendall)\n\n\nhunan <- st_read(dsn=\"data/geospatial\", layer=\"Hunan\")\n\nReading layer `Hunan' from data source \n  `D:\\Documents\\IS415-GAA-WY\\inclass-ex\\inclass-ex07\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\nGDPPC <- read_csv(\"data/aspatial/Hunan_GDPPC.csv\")\n\n\nGDPPC_st <- spacetime(GDPPC, hunan,\n                      .loc_col=\"County\",\n                      .time_col=\"Year\")\n\n\nGDPPC_st\n\n# A tibble: 1,496 × 3\n    Year County    GDPPC\n * <dbl> <chr>     <dbl>\n 1  2005 Longshan   3469\n 2  2005 Changsha  24612\n 3  2005 Wangcheng 14659\n 4  2005 Ningxiang 11687\n 5  2005 Liuyang   13406\n 6  2005 Zhuzhou    8546\n 7  2005 You       10944\n 8  2005 Chaling    8040\n 9  2005 Yanling    7383\n10  2005 Liling    11688\n# … with 1,486 more rows\n\n\n\nGDPPC_nb <- GDPPC_st %>%\n  activate(\"geometry\") %>%\n  mutate(nb = include_self(st_contiguity(geometry)),\n         wt=st_weights(nb)) %>%\n  set_nbs(\"nb\") %>%\n  set_wts(\"wt\")\n\n\nGDPPC_nb\n\n# A tibble: 1,496 × 5\n    Year County    GDPPC nb        wt       \n   <dbl> <chr>     <dbl> <list>    <list>   \n 1  2005 Anxiang    8184 <int [6]> <dbl [6]>\n 2  2005 Hanshou    6560 <int [6]> <dbl [6]>\n 3  2005 Jinshi     9956 <int [5]> <dbl [5]>\n 4  2005 Li         8394 <int [5]> <dbl [5]>\n 5  2005 Linli      8850 <int [5]> <dbl [5]>\n 6  2005 Shimen     9244 <int [6]> <dbl [6]>\n 7  2005 Liuyang   13406 <int [5]> <dbl [5]>\n 8  2005 Ningxiang 11687 <int [8]> <dbl [8]>\n 9  2005 Wangcheng 14659 <int [7]> <dbl [7]>\n10  2005 Anren      7423 <int [9]> <dbl [9]>\n# … with 1,486 more rows\n\n\n\ngi_stars <- GDPPC_nb %>%\n  group_by(Year)%>%\n  mutate(gi_star=local_gstar_perm(\n    GDPPC, nb, wt, nsim=99)) %>%\n  tidyr::unnest(gi_star)\n\n\ngi_stars\n\n# A tibble: 1,496 × 13\n# Groups:   Year [17]\n    Year County   GDPPC nb    wt    gi_star   e_gi  var_gi p_value p_sim p_fol…¹\n   <dbl> <chr>    <dbl> <lis> <lis>   <dbl>  <dbl>   <dbl>   <dbl> <dbl>   <dbl>\n 1  2005 Anxiang   8184 <int> <dbl>   0.540 0.0111 3.80e-6 5.89e-1  0.5     0.25\n 2  2005 Hanshou   6560 <int> <dbl>  -0.322 0.0116 4.83e-6 7.48e-1  0.9     0.45\n 3  2005 Jinshi    9956 <int> <dbl>   0.929 0.0115 4.92e-6 3.53e-1  0.36    0.18\n 4  2005 Li        8394 <int> <dbl>   1.11  0.0110 4.54e-6 2.67e-1  0.24    0.12\n 5  2005 Linli     8850 <int> <dbl>   1.43  0.0109 3.37e-6 1.52e-1  0.18    0.09\n 6  2005 Shimen    9244 <int> <dbl>   0.586 0.0109 2.28e-6 5.58e-1  0.56    0.28\n 7  2005 Liuyang  13406 <int> <dbl>   4.19  0.0110 4.19e-6 2.84e-5  0.02    0.01\n 8  2005 Ningxia… 11687 <int> <dbl>   2.25  0.0108 2.14e-6 2.46e-2  0.06    0.03\n 9  2005 Wangche… 14659 <int> <dbl>   4.00  0.0114 3.00e-6 6.40e-5  0.02    0.01\n10  2005 Anren     7423 <int> <dbl>   1.61  0.0114 2.63e-6 1.08e-1  0.16    0.08\n# … with 1,486 more rows, 2 more variables: skewness <dbl>, kurtosis <dbl>, and\n#   abbreviated variable name ¹​p_folded_sim\n\n\nMann-Kendall Test\n\ncbg <- gi_stars %>%\n  ungroup() %>%\n  filter(County == \"Changsha\") |>\n  select(County, Year, gi_star)\n\n\nehsa <- emerging_hotspot_analysis(\n  x=GDPPC_st,\n  .var=\"GDPPC\",\n  k=1,\n  nsim=99\n)"
  },
  {
    "objectID": "inclass-ex/inclass_ex03/inclass_ex03.html",
    "href": "inclass-ex/inclass_ex03/inclass_ex03.html",
    "title": "In-class Exercise 3",
    "section": "",
    "text": "0.1 Importing packages\n\npacman::p_load(sf, tmap, tidyverse)\n\n\n\n0.2 Importing the file\n\nNGA_wp <- read_rds(\"data/rds/NGA_wp.rds\")\n\n\n\n0.3 Plotting the Choropleth\nCan combine both fill and borders, and use tm_polygon instead, both are okay\n\np1 <- tm_shape(NGA_wp) + \n  tm_fill('wp_functional',\n          n=10,\n          style=\"equal\",\n          palette = \"Blues\") +\n  tm_borders(lwd = 0.1,\n             alpha = 1) +\n  tm_layout(main.title = \"Distribution of functional water points\",\n            legend.outside = FALSE)\np1\n\n\n\n\n\np2 <- tm_shape(NGA_wp) + \n  tm_fill('total_wp',\n          n=10,\n          style=\"equal\",\n          palette = \"Blues\") +\n  tm_borders(lwd = 0.1,\n             alpha = 1) +\n  tm_layout(main.title = \"Distribution of total water points\",\n            legend.outside = FALSE)\np2\n\n\n\n\n\ntmap_arrange(p2, p1, nrow=1)\n\n\n\n\n\n\n0.4 Deriving Proportion of Functional Water Points and Non-functional water points\n\nNGA_wp <- NGA_wp %>%\n  mutate(pct_functional = wp_functional/total_wp) %>%\n  mutate(pct_nonfunctional = wp_nonfunctional/total_wp)\n\nPlotting map of rate\n\np3 <- tm_shape(NGA_wp) + \n  tm_fill('pct_functional',\n          n=10,\n          style=\"equal\",\n          palette = \"Blues\",\n          legend.hist = TRUE) +\n  tm_borders(lwd = 0.1,\n             alpha = 1) +\n  tm_layout(main.title = \"Distribution of working water points\",\n            legend.outside = TRUE)\np3\n\n\n\n\n\n\n0.5 Percentile Map\n\n\n\n\n\n\nNote\n\n\n\nBreakpoints can be derived from the percentile.\nPassing an explicit vector of cumulative probabilities\n\n\n\n\n0.6 Data Preparation:\nExclude records with NA\n\nNGA_wp <- NGA_wp %>% \n  drop_na()\n\n\n\n0.7 Step 2: Creating customized classification and extracting values\nWe need to drop the geometric field else there will be error with the quantile\n\npercent <- c(0,0.1,.1,.5,.9,.99,1)\nvar <- NGA_wp[\"pct_functional\"] %>%\n  st_set_geometry(NULL)\nquantile(var[,1], percent)\n\n       0%       10%       10%       50%       90%       99%      100% \n0.0000000 0.2169811 0.2169811 0.4791667 0.8611111 1.0000000 1.0000000 \n\n\n\nget.var <- function(vname, df) {\n  v <- df[vname] %>%\n    st_set_geometry(NULL)\n  v <- unname(v[,1])\n  return(v)\n}\n\n\npercentmap <- function(vnam, df,legtitle=NA, mtitle=\"Percentile Map\"){\n  percent <- c(0, .01,.1,.5,.9,.99,1)\n  var <- get.var(vnam, df)\n  bperc <- quantile(var, percent)\n  tm_shape(df) +\n  tm_polygons() +\n  tm_shape(df) +\n    tm_fill(vnam,\n            title=legtitle,\n            breaks=bperc,\n            palette = \"Blues\",\n            labels=c(\"< 1%\", \"1% - 10%\", \"10% - 50%\", \"50% - 90%\", \"90% - 99%\", \"99% - 100%\")) +\n    tm_borders() +\n    tm_layout(main.title = mtitle,\n              title.position = c(\"right\", \"bottom\"))\n  \n}\n\nRunning the function\n\npercentmap(\"wp_nonfunctional\", NGA_wp)\n\n\n\n\n\n\n0.8 Boxplot\n\nggplot(data = NGA_wp, aes( x = \"\", y=wp_nonfunctional)) + geom_boxplot()"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "IS415-GAA-WY",
    "section": "",
    "text": "This is the course website.\n\n1 + 1\n\n[1] 2\n\n2 + 2\n\n[1] 4"
  },
  {
    "objectID": "lessons/lesson2/in-class-ex2.html",
    "href": "lessons/lesson2/in-class-ex2.html",
    "title": "In Class Exercise 2",
    "section": "",
    "text": "Install Packages\n\n\n\n\n\n\nTip\n\n\n\nPackages are important. Try to use SF, not SP\n\n\n\n\nShow the code\npacman::p_load(sf, tidyverse, funModeling, tmap)\n\n\n\n\nLoading the file (Convert to the projection)\n\ngeoNGA <- st_read(\"data/geospatial/nigeria_nga_l2/\", layer=\"geoBoundaries-NGA-ADM2\") %>% \n  st_transform(crs=26392)\n\nReading layer `geoBoundaries-NGA-ADM2' from data source \n  `D:\\Documents\\IS415-GAA-WY\\lessons\\lesson2\\data\\geospatial\\nigeria_nga_l2' \n  using driver `ESRI Shapefile'\nSimple feature collection with 774 features and 5 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84\n\n\nThe below file is the same as the above.\nExcept this has more information\n\nNGA <- st_read(\"data/geospatial/nigeria_nga_l2/\", layer=\"nga_admbnda_adm2_osgof_20190417\") %>% \n  st_transform(crs=26392)\n\nReading layer `nga_admbnda_adm2_osgof_20190417' from data source \n  `D:\\Documents\\IS415-GAA-WY\\lessons\\lesson2\\data\\geospatial\\nigeria_nga_l2' \n  using driver `ESRI Shapefile'\nSimple feature collection with 774 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84\n\n\nWe pick the second one as it gives the state and LGA (local government area) boundary\n\nWater point data for Nigeria\n\nwp_nga <- read_csv(\"data/aspatial/water_point_data_exchange/wpdx.csv\") %>% filter(`#clean_country_name`==\"Nigeria\")\n\nConvert water point data into sf point features\n\n\n\n\n\n\nNote\n\n\n\nYou can take the latitude degree and longitude degress\n\n\n\nwp_nga$Geometry <- st_as_sfc(wp_nga$`New Georeferenced Column`)\nwp_nga\n\n# A tibble: 97,478 × 75\n   row_id `#source`      #lat_…¹ #lon_…² #repo…³ #stat…⁴ #wate…⁵ #wate…⁶ #wate…⁷\n    <dbl> <chr>            <dbl>   <dbl> <chr>   <chr>   <chr>   <chr>   <chr>  \n 1 158721 Federal Minis…    5.07    6.62 02/19/… Yes     Boreho… Well    Mechan…\n 2 158892 Federal Minis…    5.09    7.09 02/06/… Yes     Boreho… Well    Hand P…\n 3 323117 Federal Minis…    5.91    8.77 08/31/… Yes     Boreho… Well    Hand P…\n 4 300176 Federal Minis…    5.23    7.32 05/17/… Yes     Boreho… Well    Mechan…\n 5 324346 Federal Minis…    6.88    3.36 08/17/… Yes     Boreho… Well    Mechan…\n 6 297273 Federal Minis…    6.59    3.29 05/26/… Yes     Boreho… Well    Mechan…\n 7 296853 Federal Minis…    6.60    3.26 06/02/… Yes     Boreho… Well    Mechan…\n 8 323866 Federal Minis…    6.20    6.73 09/18/… Yes     Boreho… Well    Mechan…\n 9 297044 Federal Minis…    6.61    3.30 05/26/… Yes     Boreho… Well    Mechan…\n10 324321 Federal Minis…    6.96    3.60 08/16/… Yes     Boreho… Well    Mechan…\n# … with 97,468 more rows, 66 more variables: `#water_tech_category` <chr>,\n#   `#facility_type` <chr>, `#clean_country_name` <chr>, `#clean_adm1` <chr>,\n#   `#clean_adm2` <chr>, `#clean_adm3` <chr>, `#clean_adm4` <chr>,\n#   `#install_year` <dbl>, `#installer` <chr>, `#rehab_year` <lgl>,\n#   `#rehabilitator` <lgl>, `#management_clean` <chr>, `#status_clean` <chr>,\n#   `#pay` <chr>, `#fecal_coliform_presence` <chr>,\n#   `#fecal_coliform_value` <dbl>, `#subjective_quality` <chr>, …\n\n\nConvert tibble dataframe into SF object\n\n\n\n\n\n\nNote\n\n\n\nNeed to convert Aspatial into Geospatial, but they do not have projection.\nSo need to tell R what is the projection in Aspatial (if it is wgs84, reconvert to that) -> then transform from 26392\n\n\n\nwp_sf <- st_sf(wp_nga, crs=4326)\nwp_sf\n\nSimple feature collection with 97478 features and 74 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 2.707441 ymin: 4.301812 xmax: 14.21828 ymax: 13.86568\nGeodetic CRS:  WGS 84\n# A tibble: 97,478 × 75\n   row_id `#source`      #lat_…¹ #lon_…² #repo…³ #stat…⁴ #wate…⁵ #wate…⁶ #wate…⁷\n *  <dbl> <chr>            <dbl>   <dbl> <chr>   <chr>   <chr>   <chr>   <chr>  \n 1 158721 Federal Minis…    5.07    6.62 02/19/… Yes     Boreho… Well    Mechan…\n 2 158892 Federal Minis…    5.09    7.09 02/06/… Yes     Boreho… Well    Hand P…\n 3 323117 Federal Minis…    5.91    8.77 08/31/… Yes     Boreho… Well    Hand P…\n 4 300176 Federal Minis…    5.23    7.32 05/17/… Yes     Boreho… Well    Mechan…\n 5 324346 Federal Minis…    6.88    3.36 08/17/… Yes     Boreho… Well    Mechan…\n 6 297273 Federal Minis…    6.59    3.29 05/26/… Yes     Boreho… Well    Mechan…\n 7 296853 Federal Minis…    6.60    3.26 06/02/… Yes     Boreho… Well    Mechan…\n 8 323866 Federal Minis…    6.20    6.73 09/18/… Yes     Boreho… Well    Mechan…\n 9 297044 Federal Minis…    6.61    3.30 05/26/… Yes     Boreho… Well    Mechan…\n10 324321 Federal Minis…    6.96    3.60 08/16/… Yes     Boreho… Well    Mechan…\n# … with 97,468 more rows, 66 more variables: `#water_tech_category` <chr>,\n#   `#facility_type` <chr>, `#clean_country_name` <chr>, `#clean_adm1` <chr>,\n#   `#clean_adm2` <chr>, `#clean_adm3` <chr>, `#clean_adm4` <chr>,\n#   `#install_year` <dbl>, `#installer` <chr>, `#rehab_year` <lgl>,\n#   `#rehabilitator` <lgl>, `#management_clean` <chr>, `#status_clean` <chr>,\n#   `#pay` <chr>, `#fecal_coliform_presence` <chr>,\n#   `#fecal_coliform_value` <dbl>, `#subjective_quality` <chr>, …\n\n\nConvert to the Nigeria projection system\n\nwp_sf <- wp_sf %>% st_transform(crs=26392)\nwp_sf\n\nSimple feature collection with 97478 features and 74 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 28907.91 ymin: 33736.93 xmax: 1293293 ymax: 1092883\nProjected CRS: Minna / Nigeria Mid Belt\n# A tibble: 97,478 × 75\n   row_id `#source`      #lat_…¹ #lon_…² #repo…³ #stat…⁴ #wate…⁵ #wate…⁶ #wate…⁷\n *  <dbl> <chr>            <dbl>   <dbl> <chr>   <chr>   <chr>   <chr>   <chr>  \n 1 158721 Federal Minis…    5.07    6.62 02/19/… Yes     Boreho… Well    Mechan…\n 2 158892 Federal Minis…    5.09    7.09 02/06/… Yes     Boreho… Well    Hand P…\n 3 323117 Federal Minis…    5.91    8.77 08/31/… Yes     Boreho… Well    Hand P…\n 4 300176 Federal Minis…    5.23    7.32 05/17/… Yes     Boreho… Well    Mechan…\n 5 324346 Federal Minis…    6.88    3.36 08/17/… Yes     Boreho… Well    Mechan…\n 6 297273 Federal Minis…    6.59    3.29 05/26/… Yes     Boreho… Well    Mechan…\n 7 296853 Federal Minis…    6.60    3.26 06/02/… Yes     Boreho… Well    Mechan…\n 8 323866 Federal Minis…    6.20    6.73 09/18/… Yes     Boreho… Well    Mechan…\n 9 297044 Federal Minis…    6.61    3.30 05/26/… Yes     Boreho… Well    Mechan…\n10 324321 Federal Minis…    6.96    3.60 08/16/… Yes     Boreho… Well    Mechan…\n# … with 97,468 more rows, 66 more variables: `#water_tech_category` <chr>,\n#   `#facility_type` <chr>, `#clean_country_name` <chr>, `#clean_adm1` <chr>,\n#   `#clean_adm2` <chr>, `#clean_adm3` <chr>, `#clean_adm4` <chr>,\n#   `#install_year` <dbl>, `#installer` <chr>, `#rehab_year` <lgl>,\n#   `#rehabilitator` <lgl>, `#management_clean` <chr>, `#status_clean` <chr>,\n#   `#pay` <chr>, `#fecal_coliform_presence` <chr>,\n#   `#fecal_coliform_value` <dbl>, `#subjective_quality` <chr>, …\n\n\n\n\n\nExcluding Redundant fields\nThe code below takes only the relevant column (column 3,4,8,9). As we only need them\n\nNGA <- NGA %>% \n  select(c(3:4, 8:9))\n\n\n\nChecking for duplicate name\nCheck for the quality of the data (data duplication, spatial data we want to check for missing value)\nIn this case, we have a lot of duplicated fields\n\nNGA$ADM2_EN[duplicated(NGA$ADM2_EN)==TRUE]\n\n[1] \"Bassa\"    \"Ifelodun\" \"Irepodun\" \"Nasarawa\" \"Obi\"      \"Surulere\"\n\n\nThe reason why is because there are 6 LGAs with the same name, but are in different states.\n\n\nAppend the state to ensure no duplicatation\n\nNGA$ADM2_EN[94] <- \"Bassa, Kogi\"\nNGA$ADM2_EN[95] <- \"Bassa, Plateau\"\nNGA$ADM2_EN[304] <- \"Ifelodun, Kwara\"\nNGA$ADM2_EN[305] <- \"Ifelodun, Osun\"\nNGA$ADM2_EN[355] <- \"Irepodun, Kwara\"\nNGA$ADM2_EN[356] <- \"Irepodun, Osun\"\nNGA$ADM2_EN[519] <- \"Nasawara, Kano\"\nNGA$ADM2_EN[520] <- \"Nasawara, Nasawara\"\nNGA$ADM2_EN[546] <- \"Obi, Benue\"\nNGA$ADM2_EN[547] <- \"Obi, Nasawara\"\nNGA$ADM2_EN[693] <- \"Surulere, Lagos\"\nNGA$ADM2_EN[694] <- \"Surulere, Oyo\"\n\n\nfreq(data = wp_sf, input = \"#status_clean\")\n\n\n\n\n                      #status_clean frequency percentage cumulative_perc\n1                        Functional     47228      48.45           48.45\n2                    Non-Functional     30638      31.43           79.88\n3                              <NA>     10154      10.42           90.30\n4          Functional, needs repair      4792       4.92           95.22\n5               Non-Functional, dry      2473       2.54           97.76\n6            Functional, not in use      1775       1.82           99.58\n7          Abandoned/Decommissioned       321       0.33           99.91\n8         Functional but not in use        86       0.09          100.00\n9  Non-Functional due to dry season         7       0.01          100.01\n10      Functional but needs repair         4       0.00          100.00\n\n\nMutate allows us to do data processing, replacing #status_clean to remove the ‘#’\nWe replace all na fields with ‘unknown’\n\nwp_sf_nga <- wp_sf %>%\n  rename(status_clean = \"#status_clean\") %>%\n  select(status_clean) %>%\n  mutate(status_clean = replace_na(status_clean, \"unknown\"))\n\nSF is a simple feature object, it will always have a geometric field, even though we only select one column which is ‘status_clean’\n\n\nGroup them by:\nFunctional\n\nwp_functional <- wp_sf_nga %>%\n  filter(status_clean %in% c(\"Functional\", \n                             \"Functional but not in use\", \n                             \"Functional but needs repair\"))\n\nNon-functional\n\nwp_nonfunctional <- wp_sf_nga %>%\n  filter(status_clean %in% c(\"Abandoned/Decommissioned\", \n                             \"Abandoned\", \n                             \"Non-Functional due to dry season\",\n                             \"Non-Functional\",\n                             \"Non functional due to dry season\"))\n\nUnknown\n\nwp_unknown <- wp_sf_nga %>%\n  filter(status_clean %in% c(\"unknown\"))\n\n\n\nAppend the water point count into the new dataframe\n\n\n\n\n\n\nNote\n\n\n\nThe code below tells us how many water point intersects each LGA. (functional, nonfunctional, unknown) then append that information into the original NGA dataframe by creating a new dataframe NGA_wp\n\n\n\nNGA_wp <- NGA %>%\n  mutate(`total_wp` = lengths(\n    st_intersects(NGA, wp_sf_nga))) %>%\n  mutate(`wp_functional` = lengths(\n    st_intersects(NGA, wp_functional))) %>%\n  mutate(`wp_nonfunctional` = lengths(\n    st_intersects(NGA, wp_nonfunctional))) %>%\n  mutate(`wp_unknown` = lengths(\n    st_intersects(NGA, wp_unknown)))\n\n\n\nPlot the distribution of water point\n\nggplot(data = NGA_wp, aes(x = total_wp)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\") +\n  geom_vline(aes(xintercept=mean(total_wp,na.rm=T)), color=\"red\",linetype=\"dashed\", size=0.8) +\n  ggtitle(\"Distribution of total water points by LGA\") +\n  xlab(\"No. of water points\") + \n  ylab(\"No. of\\nLGAs\") +\n  theme(axis.title.y=element_text(angle=0))\n\n\n\n\n\ntmap_mode('view') +\n  tm_shape(wp_sf_nga) +\n  tm_dots(col=\"status_clean\",\n          size=0.01,\n          border.lwd=0.5) + \n  tm_view(set.zoom.limits = c(9,16))\n\n\n\n\n\n\n\n\nSaving the analytic data in rds format\n\nwrite_rds(NGA_wp, \"data/rds/NGA_wp.rds\")"
  },
  {
    "objectID": "lessons/lesson2/lesson2_handson.html",
    "href": "lessons/lesson2/lesson2_handson.html",
    "title": "IS415-GAA-WY",
    "section": "",
    "text": "pacman::p_load(sf, tidyverse)\n\nmpsz = st_read(dsn = \"data/geospatial\", \n                  layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `D:\\Documents\\IS415-GAA-WY\\lessons\\lesson2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\ncyclingpath = st_read(dsn = \"data/geospatial/CyclingPath_Jun2022\", layer= \"CyclingPathGazette\")\n\nReading layer `CyclingPathGazette' from data source \n  `D:\\Documents\\IS415-GAA-WY\\lessons\\lesson2\\data\\geospatial\\CyclingPath_Jun2022' \n  using driver `ESRI Shapefile'\nSimple feature collection with 2248 features and 2 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11854.32 ymin: 28347.98 xmax: 42626.09 ymax: 48948.15\nProjected CRS: SVY21\n\npreschool = st_read(\"data/geospatial/preschools-location.kml\")\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `D:\\Documents\\IS415-GAA-WY\\lessons\\lesson2\\data\\geospatial\\preschools-location.kml' \n  using driver `KML'\nSimple feature collection with 1925 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\nst_geometry(mpsz)\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\nMULTIPOLYGON (((31495.56 30140.01, 31980.96 296...\n\n\nMULTIPOLYGON (((29092.28 30021.89, 29119.64 300...\n\n\nMULTIPOLYGON (((29932.33 29879.12, 29947.32 298...\n\n\nMULTIPOLYGON (((27131.28 30059.73, 27088.33 297...\n\n\nMULTIPOLYGON (((26451.03 30396.46, 26440.47 303...\n\nglimpse(mpsz)\n\nRows: 323\nColumns: 16\n$ OBJECTID   <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO <int> 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  <chr> \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  <chr> \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     <chr> \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N <chr> \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C <chr> \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   <chr> \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   <chr> \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    <chr> \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D <date> 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     <dbl> 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     <dbl> 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng <dbl> 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area <dbl> 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   <MULTIPOLYGON [m]> MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…\n\nhead(mpsz, n=5)\n\nSimple feature collection with 5 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25867.68 ymin: 28369.47 xmax: 32362.39 ymax: 30435.54\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n\n\n\nPlotting MPSZ\n\nplot(mpsz)\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\n\nplot(st_geometry(mpsz))\n\n\n\n\n\nplot(mpsz[\"PLN_AREA_N\"])\n\n\n\n\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\nmpsz3414 <- st_set_crs(mpsz, 3414)\n\nWarning: st_crs<- : replacing crs does not reproject data; use st_transform for\nthat\n\n\n\npreschool3414 <- st_transform(preschool, crs=3414)\npreschool3414\n\nSimple feature collection with 1925 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 11203.01 ymin: 25596.33 xmax: 45404.24 ymax: 49300.88\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n     Name\n1   kml_1\n2   kml_2\n3   kml_3\n4   kml_4\n5   kml_5\n6   kml_6\n7   kml_7\n8   kml_8\n9   kml_9\n10 kml_10\nescription\n1             <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>CENTRE_NAME</th> <td>BRILLIANT TOTS PTE. LTD.</td> </tr><tr bgcolor=\"\"> <th>CENTRE_CODE</th> <td>PT9334</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESS</th> <td>610, JURONG WEST STREET 65, #01 - 534, S 640610</td> </tr><tr bgcolor=\"\"> <th>POSTAL_CODE</th> <td>640610</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>0523C7904478A63D</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20200812235534</td> </tr></table></center>\n2             <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>CENTRE_NAME</th> <td>BUBBLESLAND PLAYHOUSE PTE LTD</td> </tr><tr bgcolor=\"\"> <th>CENTRE_CODE</th> <td>PT7680</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESS</th> <td>238, COMPASSVALE WALK, #01 - 542, S 540238</td> </tr><tr bgcolor=\"\"> <th>POSTAL_CODE</th> <td>540238</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>18BED05A501AA168</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20200812235534</td> </tr></table></center>\n3       <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>CENTRE_NAME</th> <td>BUCKET HOUSE PRESCHOOL</td> </tr><tr bgcolor=\"\"> <th>CENTRE_CODE</th> <td>PT9527</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESS</th> <td>39, WOODLANDS CLOSE, #01 - 62, MEGA@WOODLANDS, S 737856</td> </tr><tr bgcolor=\"\"> <th>POSTAL_CODE</th> <td>737856</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>C88B9AC31EE71BF6</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20200812235534</td> </tr></table></center>\n4            <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>CENTRE_NAME</th> <td>BUMBLE BEE CHILD CARE CENTRE</td> </tr><tr bgcolor=\"\"> <th>CENTRE_CODE</th> <td>PT3150</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESS</th> <td>369, WOODLANDS AVENUE 1, #01 - 853, S 730369</td> </tr><tr bgcolor=\"\"> <th>POSTAL_CODE</th> <td>730369</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>64AB8FACA8F60129</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20200812235534</td> </tr></table></center>\n5               <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>CENTRE_NAME</th> <td>BUSY BEES SINGAPORE PTE LTD</td> </tr><tr bgcolor=\"\"> <th>CENTRE_CODE</th> <td>PT9117</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESS</th> <td>327B, ANCHORVALE ROAD, #01 - 322, S 542327</td> </tr><tr bgcolor=\"\"> <th>POSTAL_CODE</th> <td>542327</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>E1B55AC65B9059E8</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20200812235534</td> </tr></table></center>\n6                  <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>CENTRE_NAME</th> <td>BUSY BEES SINGAPORE PTE LTD</td> </tr><tr bgcolor=\"\"> <th>CENTRE_CODE</th> <td>PT9066</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESS</th> <td>211A, PUNGGOL WALK, #01 - 623, S 821211</td> </tr><tr bgcolor=\"\"> <th>POSTAL_CODE</th> <td>821211</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>3B5A4AF2696592AA</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20200812235534</td> </tr></table></center>\n7       <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>CENTRE_NAME</th> <td>BUSY BEES SINGAPORE PTE LTD</td> </tr><tr bgcolor=\"\"> <th>CENTRE_CODE</th> <td>PT9479</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESS</th> <td>2, GAMBAS CRESCENT,  - 01-03, NORDCOM II, S 757044</td> </tr><tr bgcolor=\"\"> <th>POSTAL_CODE</th> <td>757044</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>5F5452B568838620</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20200812235534</td> </tr></table></center>\n8          <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>CENTRE_NAME</th> <td>BUSY BEES SINGAPORE PTE.LTD</td> </tr><tr bgcolor=\"\"> <th>CENTRE_CODE</th> <td>PT9127</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESS</th> <td>6, SERANGOON NORTH AVENUE 5, #02 - 01, S 554910</td> </tr><tr bgcolor=\"\"> <th>POSTAL_CODE</th> <td>554910</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>3AD4173BBB057D89</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20200812235534</td> </tr></table></center>\n9             <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>CENTRE_NAME</th> <td>BUSY BEES SINGAPORE PTE.LTD.</td> </tr><tr bgcolor=\"\"> <th>CENTRE_CODE</th> <td>PT9067</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESS</th> <td>348A, YISHUN AVENUE 11, #01 - 557, S 761348</td> </tr><tr bgcolor=\"\"> <th>POSTAL_CODE</th> <td>761348</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>F4D7A4BDA3CBB15F</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20200812235534</td> </tr></table></center>\n10 <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>CENTRE_NAME</th> <td>CAELUM JUNIOR @ BENDEMEER PTE. LTD.</td> </tr><tr bgcolor=\"\"> <th>CENTRE_CODE</th> <td>PT9053</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESS</th> <td>70, BENDEMEER ROAD, #02 - 01, LUZERNE, S 339940</td> </tr><tr bgcolor=\"\"> <th>POSTAL_CODE</th> <td>339940</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>D55FC7583E8CCBA7</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20200812235534</td> </tr></table></center>\n                        geometry\n1  POINT Z (13258.34 35611.04 0)\n2  POINT Z (35272.09 41373.42 0)\n3  POINT Z (25050.54 46634.14 0)\n4  POINT Z (22892.48 46127.66 0)\n5  POINT Z (34155.79 41949.13 0)\n6   POINT Z (35414.54 42625.1 0)\n7  POINT Z (26046.98 47205.62 0)\n8  POINT Z (31980.09 39607.05 0)\n9  POINT Z (28879.22 45454.97 0)\n10 POINT Z (31250.89 33171.55 0)\n\n\n\n\nImporting ASpatial Data\n\nlistings <- read_csv(\"data/aspatial/listings.csv\")\n\nRows: 4161 Columns: 75\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (26): listing_url, source, name, description, neighborhood_overview, pi...\ndbl  (37): id, scrape_id, host_id, host_listings_count, host_total_listings_...\nlgl   (7): host_is_superhost, host_has_profile_pic, host_identity_verified, ...\ndate  (5): last_scraped, host_since, calendar_last_scraped, first_review, la...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nlist(listings)\n\n[[1]]\n# A tibble: 4,161 × 75\n       id listing_url    scrap…¹ last_scr…² source name  descr…³ neigh…⁴ pictu…⁵\n    <dbl> <chr>            <dbl> <date>     <chr>  <chr> <chr>   <chr>   <chr>  \n 1  50646 https://www.a… 2.02e13 2022-09-23 previ… Plea… Fully … The se… https:…\n 2  71609 https://www.a… 2.02e13 2022-09-22 city … Ensu… For 3 … <NA>    https:…\n 3  71896 https://www.a… 2.02e13 2022-09-22 city … B&B … <b>The… <NA>    https:…\n 4  71903 https://www.a… 2.02e13 2022-09-22 city … Room… Like y… Quiet … https:…\n 5 275344 https://www.a… 2.02e13 2022-09-22 city … 15 m… Lovely… Bus st… https:…\n 6 289234 https://www.a… 2.02e13 2022-09-22 city … Book… This w… A quie… https:…\n 7 294281 https://www.a… 2.02e13 2022-09-22 city … 5 mi… I have… <NA>    https:…\n 8 324945 https://www.a… 2.02e13 2022-09-22 city … Cozy… <b>The… <NA>    https:…\n 9 330089 https://www.a… 2.02e13 2022-09-22 city … Cozy… A unit… <NA>    https:…\n10 330095 https://www.a… 2.02e13 2022-09-22 city … 10 m… Cosy, … Near I… https:…\n# … with 4,151 more rows, 66 more variables: host_id <dbl>, host_url <chr>,\n#   host_name <chr>, host_since <date>, host_location <chr>, host_about <chr>,\n#   host_response_time <chr>, host_response_rate <chr>,\n#   host_acceptance_rate <chr>, host_is_superhost <lgl>,\n#   host_thumbnail_url <chr>, host_picture_url <chr>, host_neighbourhood <chr>,\n#   host_listings_count <dbl>, host_total_listings_count <dbl>,\n#   host_verifications <chr>, host_has_profile_pic <lgl>, …\n\n\n\nlistings_sf <- st_as_sf(listings, coords = c(\"longitude\", \"latitude\"), crs=4326) %>%\n  st_transform(crs=3414)\n\n\nglimpse(listings_sf)\n\nRows: 4,161\nColumns: 74\n$ id                                           <dbl> 50646, 71609, 71896, 7190…\n$ listing_url                                  <chr> \"https://www.airbnb.com/r…\n$ scrape_id                                    <dbl> 2.022092e+13, 2.022092e+1…\n$ last_scraped                                 <date> 2022-09-23, 2022-09-22, …\n$ source                                       <chr> \"previous scrape\", \"city …\n$ name                                         <chr> \"Pleasant Room along Buki…\n$ description                                  <chr> \"Fully furnished bedroom …\n$ neighborhood_overview                        <chr> \"The serenity & quiet sur…\n$ picture_url                                  <chr> \"https://a0.muscache.com/…\n$ host_id                                      <dbl> 227796, 367042, 367042, 3…\n$ host_url                                     <chr> \"https://www.airbnb.com/u…\n$ host_name                                    <chr> \"Sujatha\", \"Belinda\", \"Be…\n$ host_since                                   <date> 2010-09-08, 2011-01-29, …\n$ host_location                                <chr> \"Singapore\", \"Singapore\",…\n$ host_about                                   <chr> \"I am a working professio…\n$ host_response_time                           <chr> \"a few days or more\", \"wi…\n$ host_response_rate                           <chr> \"0%\", \"100%\", \"100%\", \"10…\n$ host_acceptance_rate                         <chr> \"N/A\", \"100%\", \"100%\", \"1…\n$ host_is_superhost                            <lgl> FALSE, FALSE, FALSE, FALS…\n$ host_thumbnail_url                           <chr> \"https://a0.muscache.com/…\n$ host_picture_url                             <chr> \"https://a0.muscache.com/…\n$ host_neighbourhood                           <chr> \"Bukit Timah\", \"Tampines\"…\n$ host_listings_count                          <dbl> 1, 6, 6, 6, 44, 6, 7, 44,…\n$ host_total_listings_count                    <dbl> 4, 15, 15, 15, 57, 15, 8,…\n$ host_verifications                           <chr> \"['email', 'phone', 'work…\n$ host_has_profile_pic                         <lgl> TRUE, TRUE, TRUE, TRUE, T…\n$ host_identity_verified                       <lgl> TRUE, TRUE, TRUE, TRUE, T…\n$ neighbourhood                                <chr> \"Singapore, Singapore\", N…\n$ neighbourhood_cleansed                       <chr> \"Bukit Timah\", \"Tampines\"…\n$ neighbourhood_group_cleansed                 <chr> \"Central Region\", \"East R…\n$ property_type                                <chr> \"Private room in rental u…\n$ room_type                                    <chr> \"Private room\", \"Private …\n$ accommodates                                 <dbl> 2, 6, 1, 2, 1, 4, 2, 1, 1…\n$ bathrooms                                    <lgl> NA, NA, NA, NA, NA, NA, N…\n$ bathrooms_text                               <chr> \"1 bath\", \"1 private bath…\n$ bedrooms                                     <dbl> 1, 2, 1, 1, 1, 3, 1, 1, N…\n$ beds                                         <dbl> 1, 3, 1, 2, 1, 5, 1, 1, 1…\n$ amenities                                    <chr> \"[\\\"Gym\\\", \\\"Washer\\\", \\\"…\n$ price                                        <chr> \"$80.00\", \"$145.00\", \"$85…\n$ minimum_nights                               <dbl> 92, 92, 92, 92, 60, 92, 9…\n$ maximum_nights                               <dbl> 730, 1125, 1125, 1125, 99…\n$ minimum_minimum_nights                       <dbl> 92, 92, 92, 92, 60, 92, 9…\n$ maximum_minimum_nights                       <dbl> 92, 92, 92, 92, 60, 92, 9…\n$ minimum_maximum_nights                       <dbl> 730, 1125, 1125, 1125, 99…\n$ maximum_maximum_nights                       <dbl> 730, 1125, 1125, 1125, 99…\n$ minimum_nights_avg_ntm                       <dbl> 92, 92, 92, 92, 60, 92, 9…\n$ maximum_nights_avg_ntm                       <dbl> 730, 1125, 1125, 1125, 99…\n$ calendar_updated                             <lgl> NA, NA, NA, NA, NA, NA, N…\n$ has_availability                             <lgl> TRUE, TRUE, TRUE, TRUE, T…\n$ availability_30                              <dbl> 30, 5, 0, 30, 0, 0, 30, 5…\n$ availability_60                              <dbl> 60, 35, 1, 60, 0, 0, 60, …\n$ availability_90                              <dbl> 90, 65, 1, 90, 21, 10, 90…\n$ availability_365                             <dbl> 365, 340, 265, 365, 296, …\n$ calendar_last_scraped                        <date> 2022-09-23, 2022-09-22, …\n$ number_of_reviews                            <dbl> 18, 20, 24, 47, 14, 12, 1…\n$ number_of_reviews_ltm                        <dbl> 0, 0, 0, 0, 1, 0, 0, 3, 2…\n$ number_of_reviews_l30d                       <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ first_review                                 <date> 2014-04-18, 2011-12-19, …\n$ last_review                                  <date> 2014-12-26, 2020-01-17, …\n$ review_scores_rating                         <dbl> 4.56, 4.44, 4.16, 4.41, 4…\n$ review_scores_accuracy                       <dbl> 4.72, 4.37, 4.22, 4.39, 4…\n$ review_scores_cleanliness                    <dbl> 4.78, 4.00, 4.09, 4.52, 4…\n$ review_scores_checkin                        <dbl> 4.78, 4.63, 4.43, 4.63, 4…\n$ review_scores_communication                  <dbl> 4.94, 4.78, 4.43, 4.64, 4…\n$ review_scores_location                       <dbl> 4.72, 4.26, 4.17, 4.50, 4…\n$ review_scores_value                          <dbl> 4.50, 4.32, 4.04, 4.36, 4…\n$ license                                      <chr> NA, NA, NA, NA, \"S0399\", …\n$ instant_bookable                             <lgl> FALSE, FALSE, TRUE, FALSE…\n$ calculated_host_listings_count               <dbl> 1, 6, 6, 6, 44, 6, 7, 44,…\n$ calculated_host_listings_count_entire_homes  <dbl> 0, 0, 0, 0, 2, 0, 1, 2, 2…\n$ calculated_host_listings_count_private_rooms <dbl> 1, 6, 6, 6, 42, 6, 6, 42,…\n$ calculated_host_listings_count_shared_rooms  <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ reviews_per_month                            <dbl> 0.18, 0.15, 0.18, 0.34, 0…\n$ geometry                                     <POINT [m]> POINT (22646.02 351…\n\n\n\n\nBuffering\n\nbuffer_cycling <- st_buffer(cyclingpath, dist=5, nQuadSegs=30)\nbuffer_cycling$AREA <- st_area(buffer_cycling)\nsum(buffer_cycling$AREA)\n\n1556978 [m^2]\n\n\n\n\nPoint-in-polygon count\n\nmpsz3414$`PreSch Count`<- lengths(st_intersects(mpsz3414, preschool3414))\nsummary(mpsz3414$`PreSch Count`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    0.00    3.00    5.96    9.00   58.00 \n\n\n\nCalculate density of pre-school by planning subzone\n\nmpsz3414$Area <- mpsz3414 %>%\n  st_area()\n\nmpsz3414 <- mpsz3414 %>%\n  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)\n\n\n\n\n{summary(mpsz3414$`PreSch Density`)}\n\n\n\nExploratory Data Analysis\n\nhist(mpsz3414$`PreSch Density`)\n\n\n\n\n\nggplot(data=mpsz3414, \n       aes(x= as.numeric(`PreSch Density`)))+\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  labs(title = \"Are pre-school even distributed in Singapore?\",\n       subtitle= \"There are many planning sub-zones with a single pre-school, on the other hand, \\nthere are two planning sub-zones with at least 20 pre-schools\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Frequency\")\n\n\n\n\n\nScatterplot showing the relationship between Pre-school Density and Pre-school Count\n\nggplot(data=mpsz3414, \n       aes(y = `PreSch Count`, \n           x= as.numeric(`PreSch Density`)))+\n  geom_point(color=\"black\", \n             fill=\"light blue\") +\n  xlim(0, 40) +\n  ylim(0, 40) +\n  labs(title = \"\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Pre-school count\")\n\nWarning: Removed 2 rows containing missing values (`geom_point()`)."
  },
  {
    "objectID": "take-home-ex/take-home-ex01/take-home-ex01.html",
    "href": "take-home-ex/take-home-ex01/take-home-ex01.html",
    "title": "Take-home Exercise 1",
    "section": "",
    "text": "1.0 Introduction\nThis analysis aims to take a look at all the functional and non-functional water points in Osun State, Nigeria. By looking at the location of the functional and non-functional water points, we will be able to determine which clusters require immediate rehabilitation and whether these clusters are statistically significant. The analysis will comprise of three parts: Exploratory analysis, Second order spatial analysis and Spatial Correlation Analysis among the functional and non-functional water points.\n\n\n2.0 Load all the relevant packages\n\npacman::p_load(sf, tmap, tidyverse, maptools, raster, spatstat, tmap, funModeling)\n\n\n\n3.0 Load the Geospatial data from Humanitarian Data Exchange\nData Needed:\n\n\n\n\n\n\n\nDataset\nSource\n\n\n\n\nWPdx+ (Aspatial)\nhttps://data.waterpointdata.org/dataset/Water-Point-Data-Exchange-Plus-WPdx-/eqje-vguj/data\n\n\nHumanitarian Data Exchange (Geospatial)\nhttps://data.humdata.org/\n\n\n\nWe filter out everything else that is unnecessary outside of Osun\n\nNGA_wp_geo <- st_read(dsn = \"data/geospatial\", \n                layer = \"nga_admbnda_adm2_osgof_20190417\") %>% filter(ADM1_EN == \"Osun\") %>% st_transform(crs=26392)\n\nReading layer `nga_admbnda_adm2_osgof_20190417' from data source \n  `D:\\Documents\\IS415-GAA-WY\\take-home-ex\\take-home-ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 774 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84\n\n\n\n\n\n\n\n\nNote\n\n\n\nFrom the above, we can tell that Nigeria is currently in WGS84\n\n\n\n\n4.0 Get information from Nigeria -> OSUN state only\n\n\n\n\n\n\nNote\n\n\n\nFor our analysis, we are only looking for Osun state, so we’ll filter out unnecessary states at this stage\n\n\n\nnga_wp_as <- read_csv(\"data/aspatial/nga_wp.csv\") %>%\n  filter(`#clean_country_name` == \"Nigeria\", `#clean_adm1` == \"Osun\")\n\n\n4.1 Check for duplicated rows\n\nNGA_wp_geo$ADM2_EN[duplicated(NGA_wp_geo$ADM2_EN)==TRUE]\n\ncharacter(0)\n\n\n\n\n\n\n\n\nNote\n\n\n\nThere are no duplicate rows, as we have filtered out only Osun States\n\n\n\n\n4.2 Convert water point data into sf point features\nWe need to convert the aspatial data into an sf dataframe\nBelow function, we will create sfc object from existing wkt column\n\nnga_wp_as$Geometry = st_as_sfc(nga_wp_as$`New Georeferenced Column`)\nnga_wp_as\n\n# A tibble: 5,745 × 75\n   row_id `#source`      #lat_…¹ #lon_…² #repo…³ #stat…⁴ #wate…⁵ #wate…⁶ #wate…⁷\n    <dbl> <chr>            <dbl>   <dbl> <chr>   <chr>   <chr>   <chr>   <chr>  \n 1 225950 Federal Minis…    7.43    4.26 05/05/… Yes     Boreho… Well    Hand P…\n 2 225524 Federal Minis…    7.78    4.56 04/22/… Yes     Protec… Well    Hand P…\n 3 197014 Federal Minis…    7.49    4.53 04/30/… Yes     Boreho… Well    Mechan…\n 4 225173 Federal Minis…    7.93    4.73 05/02/… Yes     Boreho… Well    Hand P…\n 5 225843 Federal Minis…    7.74    4.44 05/08/… Yes     Boreho… Well    Hand P…\n 6 235508 Federal Minis…    7.15    4.64 04/27/… Yes     Protec… Well    Hand P…\n 7 197708 Federal Minis…    7.87    4.72 05/13/… Yes     Boreho… Well    Mechan…\n 8 195041 Federal Minis…    7.73    4.45 06/17/… Yes     Protec… Spring  <NA>   \n 9 225222 Federal Minis…    7.81    4.15 05/14/… Yes     Protec… Spring  Mechan…\n10 460770 GRID3             7.4     4.33 06/13/… Unknown Boreho… Well    <NA>   \n# … with 5,735 more rows, 66 more variables: `#water_tech_category` <chr>,\n#   `#facility_type` <chr>, `#clean_country_name` <chr>, `#clean_adm1` <chr>,\n#   `#clean_adm2` <chr>, `#clean_adm3` <chr>, `#clean_adm4` <chr>,\n#   `#install_year` <dbl>, `#installer` <chr>, `#rehab_year` <lgl>,\n#   `#rehabilitator` <lgl>, `#management_clean` <chr>, `#status_clean` <chr>,\n#   `#pay` <chr>, `#fecal_coliform_presence` <chr>,\n#   `#fecal_coliform_value` <dbl>, `#subjective_quality` <chr>, …\n\n\n\n\n4.3 Convert into table into sf object using the original wgs 84 coordinate system\n\nwp_sf <- st_sf(nga_wp_as, crs=4326)\n\nThis function will convert it into Nigeria’s projected coordinate system\n\nwp_sf <- wp_sf %>%\n  st_transform(crs = 26392)\n\n\n\n\n5.0 Data Wrangling and Plotting of Water Point Data\nConsidering that we are mapping out the functional and non-functional water points, we will check the number of status clean and non status clean.\n\nfreq(data = wp_sf,\n     input = '#status_clean')\n\n\n\n\n              #status_clean frequency percentage cumulative_perc\n1                Functional      2406      41.88           41.88\n2            Non-Functional      2086      36.31           78.19\n3                      <NA>       748      13.02           91.21\n4  Functional, needs repair       259       4.51           95.72\n5       Non-Functional, dry       159       2.77           98.49\n6    Functional, not in use        64       1.11           99.60\n7  Abandoned/Decommissioned        15       0.26           99.86\n8 Functional but not in use         8       0.14          100.00\n\n\n\n5.1 Rename column name from #status clean to status_clean and replace na with ‘unknown’ tag\nNeed to prepend dplyr because raster has a similar function\n\nwp_sf_nga <- wp_sf %>% \n  rename(status_clean = '#status_clean') %>%\n  rename(clean_adm2 = '#clean_adm2') %>%\n  dplyr::select(status_clean, clean_adm2) %>%\n  mutate(status_clean = replace_na(\n    status_clean, \"unknown\"))\n\n\n\n5.2 Extract functional and non-functional water points\n\nwp_functional <- wp_sf_nga %>%\n  filter(status_clean %in%\n           c(\"Functional\",\n             \"Functional but not in use\",\n             \"Functional but needs repair\"))\n\nwp_nonfunctional <- wp_sf_nga %>%\n  filter(status_clean %in%\n           c(\"Abandoned/Decommissioned\",\n             \"Abandoned\",\n             \"Non-Functional due to dry season\",\n             \"Non-Functional\",\n             \"Non functional due to dry season\"))\n\nwp_unknown <- wp_sf_nga %>%\n  filter(status_clean == \"unknown\")\n\n\n\n5.3 Remove all unused or unneeded columns:\n\nNGA_wp_geo <- NGA_wp_geo %>%\n  dplyr::select(c(3:4, 8:9, ))\n\n\n\n5.4 Performing Point-in-Polygon count\n\nNGA_wp_count <- NGA_wp_geo %>% \n  mutate(`total_wp` = lengths(\n    st_intersects(NGA_wp_geo, wp_sf_nga))) %>%\n  mutate(`wp_functional` = lengths(\n    st_intersects(NGA_wp_geo, wp_functional))) %>%\n  mutate(`wp_nonfunctional` = lengths(\n    st_intersects(NGA_wp_geo, wp_nonfunctional))) %>%\n  mutate(`wp_unknown` = lengths(\n    st_intersects(NGA_wp_geo, wp_unknown)))\n\n\n\n\n6.0 Deriving the Proportion of Functional to Non-Functional Water points\nThe visualization would be more effective as percentage would give a better story as to how many functional water points there are compared to non-functional and vice-versa. This can also be used as an anchor for our comparison later with our KDE maps and second-order spatial analysis.\n\nNGA_wp_count <- NGA_wp_count %>%\n  mutate(pct_functional = wp_functional/total_wp) %>%\n  mutate(pct_nonfunctional = wp_nonfunctional/total_wp)\n\n\nFunctionalNon-Functional\n\n\n\ntm_shape(NGA_wp_count) +\n  tm_fill(\"pct_functional\",\n          n = 10,\n          style = \"equal\",\n          palette = \"Blues\",\n          legend.hist = TRUE) +\n  tm_borders(lwd = 0.1,\n             alpha = 1) +\n  tm_layout(main.title = \"Rate map of functional water point by LGAs in Osun\",\n            legend.outside = TRUE)\n\n\n\n\n\n\n\ntm_shape(NGA_wp_count) +\n  tm_fill(\"pct_nonfunctional\",\n          n = 10,\n          style = \"equal\",\n          palette = \"Blues\",\n          legend.hist = TRUE) +\n  tm_borders(lwd = 0.1,\n             alpha = 1) +\n  tm_layout(main.title = \"Rate map of non-functional water point by LGAs in Osun\",\n            legend.outside = TRUE)\n\n\n\n\n\n\n\n\n6.1 Mapping all the water points on the map\n\ntmap_mode('view') +\n  tm_shape(wp_sf_nga) +\n  tm_dots(col=\"status_clean\",\n          size=0.01,\n          border.lwd=0.5) + \n  tm_view(set.zoom.limits = c(9,16))\n\n\n\n\n\n\n\n\n\n7.0 Deriving the Kernel Density Maps of Functional/Non-Functional Water points\nConvert sf dataframes into spatial class\n\nwp_func_spatial_class <- as_Spatial(wp_functional)\nwp_nfunc_spatial_class <- as_Spatial(wp_nonfunctional)\nwp_osun <- as_Spatial(NGA_wp_geo)\n\n\n7.1 Check the type to convert to\n\n\n\n\n\n\nTip\n\n\n\nAll are spatial points except wp_osun with is polygon\n\n\n\nwp_func_spatial_class\n\nclass       : SpatialPointsDataFrame \nfeatures    : 2414 \nextent      : 177285.9, 290751, 343128.1, 450859.7  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=4 +lon_0=8.5 +k=0.99975 +x_0=670553.98 +y_0=0 +a=6378249.145 +rf=293.465 +towgs84=-92,-93,122,0,0,0,0 +units=m +no_defs \nvariables   : 2\nnames       :              status_clean, clean_adm2 \nmin values  :                Functional,   Aiyedade \nmax values  : Functional but not in use,     Osogbo \n\n\n\nwp_nfunc_spatial_class\n\nclass       : SpatialPointsDataFrame \nfeatures    : 2101 \nextent      : 180539, 290546.5, 340054.1, 450780.1  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=4 +lon_0=8.5 +k=0.99975 +x_0=670553.98 +y_0=0 +a=6378249.145 +rf=293.465 +towgs84=-92,-93,122,0,0,0,0 +units=m +no_defs \nvariables   : 2\nnames       :             status_clean, clean_adm2 \nmin values  : Abandoned/Decommissioned,   Aiyedade \nmax values  :           Non-Functional,     Osogbo \n\n\n\nwp_osun\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 30 \nextent      : 176503.2, 291043.8, 331434.7, 454520.1  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=4 +lon_0=8.5 +k=0.99975 +x_0=670553.98 +y_0=0 +a=6378249.145 +rf=293.465 +towgs84=-92,-93,122,0,0,0,0 +units=m +no_defs \nvariables   : 4\nnames       :  ADM2_EN, ADM2_PCODE, ADM1_EN, ADM1_PCODE \nmin values  : Aiyedade,   NG030001,    Osun,      NG030 \nmax values  :   Osogbo,   NG030030,    Osun,      NG030 \n\n\n\n\n7.2 Convert into generic sp format\n\nwp_func_sp <- as(wp_func_spatial_class, \"SpatialPoints\")\nwp_nfunc_sp <- as(wp_nfunc_spatial_class, \"SpatialPoints\")\nwp_osun_sp <- as(wp_osun, \"SpatialPolygons\")\n\n\n\n7.3 Convert the generic format into spatstat’s ppp format\n\nwp_func_ppp <- as(wp_func_sp, \"ppp\")\nwp_nfunc_ppp <- as(wp_nfunc_sp, \"ppp\")\n\n\n\n7.4 Plot Planar Point\n\nplot(wp_func_sp)\n\n\n\n\n\n\n7.5 Summary Statistics\n\nsummary(wp_func_ppp)\n\nPlanar point pattern:  2414 points\nAverage intensity 1.974841e-07 points per square unit\n\nCoordinates are given to 2 decimal places\ni.e. rounded to the nearest multiple of 0.01 units\n\nWindow: rectangle = [177285.9, 290750.96] x [343128.1, 450859.7] units\n                    (113500 x 107700 units)\nWindow area = 12223800000 square units\n\n\n\nsummary(wp_nfunc_ppp)\n\nPlanar point pattern:  2101 points\nAverage intensity 1.724859e-07 points per square unit\n\nCoordinates are given to 2 decimal places\ni.e. rounded to the nearest multiple of 0.01 units\n\nWindow: rectangle = [180538.96, 290546.54] x [340054.1, 450780.1] units\n                    (110000 x 110700 units)\nWindow area = 12180700000 square units\n\n\nCheck for duplicated points\n\nany(duplicated(wp_func_ppp))\n\n[1] FALSE\n\n\n\nany(duplicated(wp_nfunc_ppp))\n\n[1] FALSE\n\n\nNo duplicate points identified.\n\n\n7.6 Creating the Osun Confines using owin object\n\nosun_owin <- as(wp_osun_sp, \"owin\")\n\n\nplot(osun_owin)\n\n\n\n\n\n\n7.7 Combine Functional and Non-Functional Point Events Object and Owin Object\n\nwp_func_ppp_comb = wp_func_ppp[osun_owin]\nwp_nfunc_ppp_comb = wp_nfunc_ppp[osun_owin]\n\n\nsummary(wp_func_ppp_comb)\n\nPlanar point pattern:  2316 points\nAverage intensity 2.681826e-07 points per square unit\n\nCoordinates are given to 2 decimal places\ni.e. rounded to the nearest multiple of 0.01 units\n\nWindow: polygonal boundary\n30 separate polygons (no holes)\n            vertices      area relative.area\npolygon 1        204 766084000       0.08870\npolygon 2         81 304399000       0.03520\npolygon 3         97 465688000       0.05390\npolygon 4        124 373051000       0.04320\npolygon 5         60 149473000       0.01730\npolygon 6         84 144820000       0.01680\npolygon 7         50 102243000       0.01180\npolygon 8         72 216002000       0.02500\npolygon 9        112 269897000       0.03130\npolygon 10       125 365142000       0.04230\npolygon 11        83 111191000       0.01290\npolygon 12       126 192557000       0.02230\npolygon 13       219 904397000       0.10500\npolygon 14       174 741131000       0.08580\npolygon 15        81 138742000       0.01610\npolygon 16        65 119452000       0.01380\npolygon 17        90 280205000       0.03240\npolygon 18        69  69814600       0.00808\npolygon 19        69  42727500       0.00495\npolygon 20        49  30458800       0.00353\npolygon 21        62 263505000       0.03050\npolygon 22        93 438930000       0.05080\npolygon 23        87 274127000       0.03170\npolygon 24       105 509979000       0.05910\npolygon 25        98 292058000       0.03380\npolygon 26        64 327765000       0.03800\npolygon 27       133 108945000       0.01260\npolygon 28       122 462169000       0.05350\npolygon 29        94 109715000       0.01270\npolygon 30        95  61239800       0.00709\nenclosing rectangle: [176503.22, 291043.82] x [331434.7, 454520.1] units\n                     (114500 x 123100 units)\nWindow area = 8635910000 square units\nFraction of frame area: 0.613\n\n\n\n\n\n8.0 Plot functional and non-functional points\n\npar(mfrow=c(1,2))\nplot(wp_func_ppp_comb)\nplot(wp_nfunc_ppp_comb)\n\n\n\n\n\n8.1 Deriving the Kernel Density Map\n\nkde_wp_func_map <- density(wp_func_ppp_comb,\n                              sigma=bw.diggle,\n                              edge=TRUE,\n                            kernel=\"gaussian\") \nkde_wp_nfunc_map <- density(wp_nfunc_ppp_comb,\n                              sigma=bw.diggle,\n                              edge=TRUE,\n                            kernel=\"gaussian\") \n\n\npar(mfrow=c(1,2))\nplot(kde_wp_func_map)\nplot(kde_wp_nfunc_map)\n\n\n\n\n\n\n8.2 Rescale to KM\n\nwp_func_ppp_comb.km <- rescale(wp_func_ppp_comb, 1000, \"km\")\nwp_nfunc_ppp_comb.km <- rescale(wp_nfunc_ppp_comb, 1000, \"km\")\n\n\n\n8.3 Rerun Density for both functional and non-functional water point:\n\nkde_wp_func_map.bw <- density(wp_func_ppp_comb.km, sigma=bw.diggle, edge=TRUE, kernel=\"gaussian\")\n\nkde_wp_nfunc_map.bw <- density(wp_nfunc_ppp_comb.km, sigma=bw.diggle, edge=TRUE, kernel=\"gaussian\")\n\n\npar(mfrow=c(1,2))\nplot(kde_wp_func_map.bw)\nplot(kde_wp_nfunc_map.bw)\n\n\n\n\n\n\n8.4 Computing Kernel Density Estimation using automatic bandwidth selection method\nFrom our hands-on exercise, we were given the choice of either using bw.ppl or bw.diggle or adaptive kernel density estimatation method. We were told that bw.ppl is recommended specifically if the patterns are comprised of mostly tight clusters and well-distributed, and adaptive density are used if the data points are sparse. From my observation during the plotting of the water points, there appears to be a few tight clusters all throughout Osun and appear to be well-distributed. In lieu of that observation, I will be going with bw.ppl algorithm to determine the fixed bandwidth.\nSo, I will go with bw.ppl in this case.\n\nkde_wp_func_map.ppl <- density(wp_func_ppp_comb.km, sigma=bw.ppl, edge=TRUE, kernel=\"gaussian\")\nkde_wp_nfunc_map.ppl <- density(wp_nfunc_ppp_comb.km, sigma=bw.ppl, edge=TRUE, kernel=\"gaussian\")\n\n\n\n8.5 KDE Functional Points\n\nplot(kde_wp_func_map.ppl, main = \"bw.ppl\")\n\n\n\n\n\n\n8.6 KDE Non-Functional Points\n\nplot(kde_wp_nfunc_map.ppl, main = \"bw.ppl\")\n\n\n\n\n\n\n8.7 Convert KDE output into Grid object\n\ngridded_kde_wp_func_ppl <- as.SpatialGridDataFrame.im(kde_wp_func_map.ppl)\ngridded_kde_wp_nfunc_ppl <- as.SpatialGridDataFrame.im(kde_wp_nfunc_map.ppl)\nspplot(gridded_kde_wp_func_ppl)\n\n\n\n\n\nspplot(gridded_kde_wp_nfunc_ppl)\n\n\n\n\n\n\n8.8 Rasterise Layer so it can be mapped on tmap\n\nkde_wp_func_map_ppl_raster <- raster(gridded_kde_wp_func_ppl)\nkde_wp_nfunc_map_ppl_raster <- raster(gridded_kde_wp_nfunc_ppl)\n\nCheck the RASTER\n\nkde_wp_func_map_ppl_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.8948485, 0.9616045  (x, y)\nextent     : 176.5032, 291.0438, 331.4347, 454.5201  (xmin, xmax, ymin, ymax)\ncrs        : NA \nsource     : memory\nnames      : v \nvalues     : -9.008439e-16, 15.26599  (min, max)\n\n\n\nkde_wp_nfunc_map_ppl_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.8948485, 0.9616045  (x, y)\nextent     : 176.5032, 291.0438, 331.4347, 454.5201  (xmin, xmax, ymin, ymax)\ncrs        : NA \nsource     : memory\nnames      : v \nvalues     : -4.018365e-16, 9.797343  (min, max)\n\n\nAssign Nigeria Projection System (ESG: 26392)\n\nprojection(kde_wp_func_map_ppl_raster) <- CRS(\"+init=EPSG:26392 +units=km\")\nprojection(kde_wp_nfunc_map_ppl_raster) <- CRS(\"+init=EPSG:26392 +units=km\")\n\n\n\n8.9 Visualize functional/non-functional water point map output in TMAP:\n\nFunctional Water pointsNon-Functional Water points\n\n\n\n  tm_basemap(\"OpenStreetMap\") +\n  tmap_mode('plot') + \n  tm_shape(kde_wp_func_map_ppl_raster) +\n  tm_raster(\"v\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\"), \n            frame = FALSE, \n            main.title=\"Functional Water Points\",\n            main.title.position = \"center\",\n            main.title.size = 1)+\n  tm_view(set.zoom.limits = c(12,16))\n\n\n\n\n\n\n\n  tm_basemap(\"OpenStreetMap\") +\n  tmap_mode('plot') + \n  tm_shape(kde_wp_nfunc_map_ppl_raster) +\n  tm_raster(\"v\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\"), \n            frame = FALSE, \n            main.title=\"Non-Functional Water Points\",\n            main.title.position = \"center\",\n            main.title.size = 1)+\n  tm_view(set.zoom.limits = c(12,16))\n\n\n\n\n\n\n\n\n\n\n10.0 Describe the spatial patterns revealed by the kernel density maps.\nFrom the maps above, we can tell at first glance that the functional water points and non-functional water points are concentrated at a few points. Another interesting point of note are that most of the water point areas, regardless of functioning/non-functioning are situated on the northern side of the map, with one large cluster of non-functional water points at the center of Osun.\nThe last observation is there are more clusters of non-functioning water points compared to functioning ones.\n\n\n11.0 Highlight the advantage of kernel density map over point map.\nWe will define the point plot of both the functional and non-functional water points to compare visualization.\n\nFunctionalNon-FunctionalTogether\n\n\n\ntmap_mode('view') +\n  tm_shape(wp_functional) +\n  tm_dots(col=\"status_clean\",\n          size=0.01,\n          border.lwd=0.5) + \n  tm_view(set.zoom.limits = c(9,16))\n\n\n\n\n\n\n\n\n\ntmap_mode('view') +\n  tm_shape(NGA_wp_geo) +\n  tm_polygons() +\n  tm_shape(wp_nonfunctional) +\n  tm_dots(col=\"status_clean\",\n          size=0.01,\n          border.lwd=0.5) + \n  tm_view(set.zoom.limits = c(9,16))\n\n\n\n\n\n\n\n\n\ntmap_mode('view') +\n  tm_shape(NGA_wp_geo) +\n  tm_borders() +\n  tm_shape(wp_sf_nga) +\n  tm_dots(col=\"status_clean\",\n          size=0.01,\n          border.lwd=0.5) + \n  tm_view(set.zoom.limits = c(9,16))\n\n\n\n\n\n\n\n\n\nFrom one look at the point map, it’s not immediately obvious where the clusters are as the water points are generally well-distributed across Osun. It is only after we look at the kernel density map that it becomes obvious and clearer that the functional water points are mostly concentrated on the north west of Osun, with small clusters of non-functional water points scattered throughout. This also supports our earlier exploratory analysis where it’s revealed that Ede North and Ejigbo has a higher proportion of functioning water points, and central areas like Ife Central and Ifelodon are lacking functional ones.\nFrom this map, we can prioritise areas that would need to be fixed, and also to investigate why certain LGA’s have a higher cluster/proportion of non-functioning water points compared to others.\n\n\n11.0 Second Order Spatial Point Patterns Analysis\nNow that we have completed our spatial data analysis, it’s time we look at some of the areas where there are particularly high clusters of functioning and non-functioning water points and determine whether their clusters are statistically significant or not.\nFor this, I have chosen two states each as identified in the kernel density map for areas with high cluster of functioning and non-functioning water points. We will also use the G function across the entire state of Osun to confirm that all (both functioning and non-functioning) water point’s cluster are statistically significant.\nFunctioning:\n\nEjigbo\nEde North\n\nNon-Functioning:\n\nIfelodun\nIfe Central\n\n\nHypothesis:\nH0: The distribution of the water points are random and evenly spaced\nH1: The distribution of the water points are not randomly distributed and clustered\nConfidence Level: 95%; Significance level: 5%/0.05\n\n\n\n12.0 Create our Owin Object for all the LGAs\n\nejigbo_area = wp_osun[wp_osun$ADM2_EN == 'Ejigbo',] %>%\n  as('SpatialPolygons') %>%\n  as('owin')\n\nede_north_area = wp_osun[wp_osun$ADM2_EN == 'Ede North',]%>%\n  as('SpatialPolygons') %>%\n  as('owin')\n\nifelodun_area = wp_osun[wp_osun$ADM2_EN == 'Ifelodun',]%>%\n  as('SpatialPolygons') %>%\n  as('owin')\n\nife_central_area = wp_osun[wp_osun$ADM2_EN == 'Ife Central',]%>%\n  as('SpatialPolygons') %>%\n  as('owin')\n\n\npar(mfrow=c(2,2))\nplot(ejigbo_area, main=\"Ejigbo\")\nplot(ede_north_area, main=\"Ede North\")\nplot(ifelodun_area, main=\"Ifelodun\")\nplot(ife_central_area, main=\"Ife Central\")\n\n\n\n\n\n12.1 Extract the relevant areas for the functioning/non-functioning water points\n\n#Functioning Water points\nwp_func_ejigbo_ppp = wp_func_ppp[ejigbo_area]\nwp_func_ede_north_ppp = wp_func_ppp[ede_north_area]\n\n#Non-functioning\nwp_nfunc_ifelodun_ppp = wp_nfunc_ppp[ifelodun_area]\nwp_nfunc_ife_central_ppp = wp_nfunc_ppp[ife_central_area]\n\n\n\n12.2 Rescale them\n\nwp_func_ejigbo_ppp.km = rescale(wp_func_ejigbo_ppp, 1000, \"km\")\nwp_func_ede_north_ppp.km = rescale(wp_func_ede_north_ppp, 1000, \"km\")\nwp_nfunc_ifelodun_ppp.km = rescale(wp_nfunc_ifelodun_ppp, 1000, \"km\")\nwp_nfunc_ife_central_ppp.km = rescale(wp_nfunc_ife_central_ppp, 1000, \"km\")\n\n\n\n12.3 Functioning Water points\n\npar(mfrow=c(1,2))\nplot(wp_func_ejigbo_ppp.km, main=\"Ejigbo\")\nplot(wp_func_ede_north_ppp.km, main=\"Ede North\")\n\n\n\n\n\n\n12.4 Non-functioning Water point\n\npar(mfrow=c(1,2))\nplot(wp_nfunc_ifelodun_ppp.km, main=\"Ifelodun\")\nplot(wp_nfunc_ife_central_ppp.km, main=\"Ife Central\")\n\n\n\n\n\n\n\n13.0 Using the G Function for Functioning Water Points\nWe will use the G Function, Gest(), to measure the distribution of the spatial point patterns, in this case, our water points. If the lines are outside of the envelop, we can say that it’s statistically significant with 95% confidence.\n\n13.1 Ejigbo Study Area\n\nG_ejigbo = Gest(wp_func_ejigbo_ppp.km, correction=\"best\")\nplot(G_ejigbo)\n\n\n\n\n\n\n13.2 Complete Spatial Randomness Test\n\nG_ejigbo.csr <- envelope(wp_func_ejigbo_ppp.km, Gest, nsim = 39)\n\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\nplot(G_ejigbo.csr)\n\n\n\n\nWe can say that the distribution of functional water points are clustered as they increase rapidly within a short distance of 0.5km and that it’s statistically significant as it lies outside the envelope.\n\n\n13.3 Ede North Study Area:\n\nG_ede_north = Gest(wp_func_ede_north_ppp.km, correction=\"best\")\nplot(G_ede_north)\n\n\n\n\n\n\n13.4 Complete Spatial Randomness Test\n\nG_ede_north.csr <- envelope(wp_func_ede_north_ppp.km, Gest, nsim = 39)\n\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\nplot(G_ede_north.csr)\n\n\n\n\nSimilar results to the Ede North. The functioning water points are all clustered and statistically significant. We reject the null hypothesis that they are randomly distributed and evenly spaced.\nOverall results seems to indicate that functioning water points are generally clustered around certain places. This indicates that there might be practical/geographical reasons why the functioning water points are placed at where they are.\n\n\n\n14.0 Using the G Function for Non-Functioning Water Points\n\n14.1 Ifelodun Study Area\n\nG_ifelodun = Gest(wp_nfunc_ifelodun_ppp.km, correction=\"best\")\nplot(G_ifelodun)\n\n\n\n\n\n\n14.2 Complete Spatial Randomness Test\n\nG_ifelodun.csr <- envelope(wp_nfunc_ifelodun_ppp.km, Gest, nsim = 39)\n\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\nplot(G_ifelodun.csr)\n\n\n\n\n\n\n14.3 Ife Central Study Area\n\nG_ife_central_area = Gest(wp_nfunc_ife_central_ppp.km, correction=\"best\")\nplot(G_ife_central_area)\n\n\n\n\n\n\n14.4 Complete Spatial Randomness Test\n\nG_ife_central_area.csr <- envelope(wp_nfunc_ife_central_ppp.km, Gest, nsim = 39)\n\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\nplot(G_ife_central_area.csr)\n\n\n\n\nFrom the above results, we can say that the distribution of non-functioning water points are also clustered and not randomly distributed. Which means there might be external reasons why non-functioning water points are clustered at these areas. We reject the null hypothesis that they are randomly distributed and evenly spaced.\n\n\n\n15.0 Running on the entire Osun State by including the Functioning and Non-functioning Water Points:\n\n15.1 Creating the PPP and Owin object\n\nwp_ppp <- as_Spatial(wp_sf_nga) %>%\n  as(\"SpatialPoints\") %>%\n  as(\"ppp\")\n\n\nwp_ppp = wp_ppp[osun_owin]\nwp_ppp.km = rescale(wp_ppp, 1000, \"km\")\n\nWe’ll now perform the G Function across the entire Osun state to confirm our hypothesis that the water points are clustered in general.\n\nG_osun_state = Gest(wp_ppp.km, correction=\"best\")\n\n\n\n15.2 Plot\n\nplot(G_osun_state)\n\n\n\n\n\nG_osun_state.csr <- envelope(wp_ppp.km, Gest, nsim = 39)\n\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n15.3 Plot the Envelop\n\nplot(G_osun_state.csr)\n\n\n\n\n\n\n15.4 G-Function on Functioning Water Points\n\nG_osun_state_func.csr <- envelope(wp_func_ppp_comb.km, Gest, nsim = 39)\n\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\nplot(G_osun_state_func.csr)\n\n\n\n\n\n\n15.5 G-Function on Non-Functioning Water Points\n\nG_osun_state_nfunc.csr <- envelope(wp_nfunc_ppp_comb.km, Gest, nsim = 39)\n\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\nplot(G_osun_state_nfunc.csr)\n\n\n\n\nFrom the above analysis we can say for certain that all the water points in Osun state are clustered and statistically significant as we reject the null hypothesis that they are randomly and evenly distributed. Again, the reason why this could be the case is the same as above, in that there could potentially be practical/geographical reasons why the water points are placed there.\nReasons could be there are natural water sources such as rivers, quarries and reservoirs at these areas or these areas are heavily populated with people, and the water points are built close to residential areas.\n\n\n\n16.0 Spatial Correlation Analysis\nTo confirm whether the spatial distribution of functional and non-functional water points are independent, we will be using the L-Function for correlation analysis. We will applying this over the entire Osun state with both functional and non-functional water points combined.\n\nH0: The functional and non-functional water points are distributed randomly and spatially independent\nH1: The functional and non-functional water points are distributed non-random and spatially dependent.\nConfidence Level: 95%\n\nNull hypothesis will be rejected.\n\n\n17.0 Run the L-Function on Osun State:\nWe’ll now perform the L Function across the entire Osun state using the PPP and owin object we’ve created earlier.\n\nL_osun_state = Lest(wp_ppp.km, correction=\"Ripley\")\nplot(L_osun_state, . -r ~ r, \n     ylab= \"L(d)-r\", xlab = \"d(km)\")\n\n\n\n17.1 Complete Spatial Randomness Test\n\nL_osun_state.csr <- envelope(wp_ppp.km, Lest, nsim = 39, rank = 1, glocal=TRUE)\n\n17.2 Plot the Envelop\n\nplot(L_osun_state.csr, . - r ~ r, xlab=\"d(km)\", ylab=\"L(d)-r\")\n\n\nFrom the combined functional and non-functional water points. We can say with statistical certainty that the functional and non-functional points are clustered close to each other, as from the graph the distance is so small that it can’t even be seen and are spatially dependent on each other. Therefore we reject the null hypothesis that the water points are distributed randomly and spatially independent from each other.\nThis finding ties in with the earlier cluster analysis using the G-Function that there might be practical/geographical reasons why they are spatially dependent and clustered in certain areas. Reasons can include having water points close to residential areas or close to natural water sources such as rivers, quarries or reservoirs.\n\n\n\nAcknowledgement:\nThanks to Prof. Kam for the resources on his hands-on and in-class exercises that assisted in the completion of this take home exercise!\nReferenced the Spatstat book for advice on which functions to use."
  },
  {
    "objectID": "take-home-ex/take-home-ex02/take-home-ex02.html",
    "href": "take-home-ex/take-home-ex02/take-home-ex02.html",
    "title": "Take-Home Exercise 2",
    "section": "",
    "text": "Looking at receptiveness\nRemove all outer islands\n\n\n\nINDONESIA\nENGLISH\n\n\n\n\nWILAYAH KOTA\nCITY AREA\n\n\nKECAMATAN\nSUBDISTRICT\n\n\nKERLURAHAN\nWARD (Local Villages)\n\n\nSASARAN\nTARGET\n\n\nBELUM VAKSIN\nNOT YET VACCINATED\n\n\nJUMLAH DOSIS\nDOSAGE AMOUNT\n\n\nTOTAL VAKSIN DIBERIKAN\nTOTAL VACCINE GIVEN\n\n\nLANSIA DOSIS\nELDERY DOSAGE\n\n\nPELAYAN PUBLIK DOSIS\nPUBLIC SERVANT DOSAGE\n\n\nGOTONG ROYONG\nKAMPUNG SPIRIT (MUTUAL CO-OP)\n\n\nTENAGA KESEHATAN\nHEALTH WORKERS\n\n\nTAHAPAN\nSTAGES 3 VACCINATION\n\n\nREMAJA\nYOUTH VACCINATION"
  },
  {
    "objectID": "take-home-ex/take-home-ex02/take-home-ex02.html#describe-the-spatial-patterns-revealed-by-the-maps",
    "href": "take-home-ex/take-home-ex02/take-home-ex02.html#describe-the-spatial-patterns-revealed-by-the-maps",
    "title": "Take-Home Exercise 2",
    "section": "Describe the spatial patterns revealed by the maps:",
    "text": "Describe the spatial patterns revealed by the maps:\nFrom a glance, it appears that during the first three months, during 2021, only a few city states has a high rate of vaccination. However, in subsequent months, the neighboring village sub-district all begin to catch up save for a few. Eventually ending in 2022 June with most of the people vaccinated in Jakarta.\nThe village closest to the villages with higher vaccination rates are the second to start receiving the vaccination doses, as they show demonstrably higher vaccination rates compared to other villages (October 2021). They are then slowly doled out across nearby villages until most villages in Jakarta are almost fully vaccinated.\nInterestingly, during this period of measure (July), there was an exponential spike (Reuters) in Covid-19 cases with heavy bans and movement restrictions across the board with recorded 2.2 million cases. This might explain why the almost equal distribution in terms of vaccination rates across the board in Jakarta. The only two villages, seemingly with lower rates compared to the rest of the city are:\n\nSenayan\nKebon Melati\nPetamburan\n\n\nPlot the rate of change using tmap\n\n#trace_val <- c(\"2021-07-31\", \"2021-08-31\", \"2021-09-30\", \"2021-10-31\", \"2021-11-30\", \"2021-12-31\", \"2022-01-31\", \"2022-02-27\", \"2022-03-31\", \"2022-04-30\", \"2022-05-31\", \"2022-06-30\")\n\n#jakarta_combined_long <- combined_jakarta %>% \n#  pivot_longer(cols=trace_val, names_to=\"Month_Vac\", values_to = #\"total_vaccinated_rate\")"
  }
]